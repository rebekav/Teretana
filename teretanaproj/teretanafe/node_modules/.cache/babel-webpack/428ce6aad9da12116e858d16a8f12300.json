{"ast":null,"code":"import _slicedToArray from \"C:/Users/Bex/Desktop/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _inherits from \"C:/Users/Bex/Desktop/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Bex/Desktop/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _createClass from \"C:/Users/Bex/Desktop/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/Bex/Desktop/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\nvar _c0 = [\"*\"];\n\nfunction getMatIconNameNotFoundError(iconName) {\n  return Error(\"Unable to find icon with the name \\\"\".concat(iconName, \"\\\"\"));\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\n\n\nfunction getMatIconNoHttpProviderError() {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' + 'Please include the HttpClientModule from @angular/common/http in your ' + 'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeUrlError(url) {\n  return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" + \"via Angular's DomSanitizer. Attempted URL was \\\"\".concat(url, \"\\\".\"));\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\n\n\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n  return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" + \"Angular's DomSanitizer. Attempted literal was \\\"\".concat(literal, \"\\\".\"));\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\n\n\nvar SvgIconConfig = function SvgIconConfig(url, svgText, options) {\n  _classCallCheck(this, SvgIconConfig);\n\n  this.url = url;\n  this.svgText = svgText;\n  this.options = options;\n};\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n\n\nvar MatIconRegistry = /*#__PURE__*/function () {\n  function MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {\n    _classCallCheck(this, MatIconRegistry);\n\n    this._httpClient = _httpClient;\n    this._sanitizer = _sanitizer;\n    this._errorHandler = _errorHandler;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n\n    this._svgIconConfigs = new Map();\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n\n    this._iconSetConfigs = new Map();\n    /** Cache for icons loaded by direct URLs. */\n\n    this._cachedIconsByUrl = new Map();\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n\n    this._inProgressUrlFetches = new Map();\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n\n    this._fontCssClassesByAlias = new Map();\n    /** Registered icon resolver functions. */\n\n    this._resolvers = [];\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n\n    this._defaultFontSetClass = 'material-icons';\n    this._document = document;\n  }\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n\n\n  _createClass(MatIconRegistry, [{\n    key: \"addSvgIcon\",\n    value: function addSvgIcon(iconName, url, options) {\n      return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n\n  }, {\n    key: \"addSvgIconLiteral\",\n    value: function addSvgIconLiteral(iconName, literal, options) {\n      return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n\n  }, {\n    key: \"addSvgIconInNamespace\",\n    value: function addSvgIconInNamespace(namespace, iconName, url, options) {\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n\n  }, {\n    key: \"addSvgIconResolver\",\n    value: function addSvgIconResolver(resolver) {\n      this._resolvers.push(resolver);\n\n      return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n\n  }, {\n    key: \"addSvgIconLiteralInNamespace\",\n    value: function addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n      var cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal); // TODO: add an ngDevMode check\n\n\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n\n      return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n\n  }, {\n    key: \"addSvgIconSet\",\n    value: function addSvgIconSet(url, options) {\n      return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteral\",\n    value: function addSvgIconSetLiteral(literal, options) {\n      return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n\n  }, {\n    key: \"addSvgIconSetInNamespace\",\n    value: function addSvgIconSetInNamespace(namespace, url, options) {\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n\n  }, {\n    key: \"addSvgIconSetLiteralInNamespace\",\n    value: function addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n      var cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n      if (!cleanLiteral) {\n        throw getMatIconFailedToSanitizeLiteralError(literal);\n      }\n\n      return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n\n  }, {\n    key: \"registerFontClassAlias\",\n    value: function registerFontClassAlias(alias) {\n      var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : alias;\n\n      this._fontCssClassesByAlias.set(alias, className);\n\n      return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n\n  }, {\n    key: \"classNameForFontAlias\",\n    value: function classNameForFontAlias(alias) {\n      return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n\n  }, {\n    key: \"setDefaultFontSetClass\",\n    value: function setDefaultFontSetClass(className) {\n      this._defaultFontSetClass = className;\n      return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n\n  }, {\n    key: \"getDefaultFontSetClass\",\n    value: function getDefaultFontSetClass() {\n      return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n\n  }, {\n    key: \"getSvgIconFromUrl\",\n    value: function getSvgIconFromUrl(safeUrl) {\n      var _this = this;\n\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      }\n\n      var cachedIcon = this._cachedIconsByUrl.get(url);\n\n      if (cachedIcon) {\n        return of(cloneSvg(cachedIcon));\n      }\n\n      return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(function (svg) {\n        return _this._cachedIconsByUrl.set(url, svg);\n      }), map(function (svg) {\n        return cloneSvg(svg);\n      }));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n\n  }, {\n    key: \"getNamedSvgIcon\",\n    value: function getNamedSvgIcon(name) {\n      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var key = iconKey(namespace, name);\n\n      var config = this._svgIconConfigs.get(key); // Return (copy of) cached icon if possible.\n\n\n      if (config) {\n        return this._getSvgFromConfig(config);\n      } // Otherwise try to resolve the config from one of the resolver functions.\n\n\n      config = this._getIconConfigFromResolvers(namespace, name);\n\n      if (config) {\n        this._svgIconConfigs.set(key, config);\n\n        return this._getSvgFromConfig(config);\n      } // See if we have any icon sets registered for the namespace.\n\n\n      var iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n      if (iconSetConfigs) {\n        return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n      }\n\n      return throwError(getMatIconNameNotFoundError(key));\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._resolvers = [];\n\n      this._svgIconConfigs.clear();\n\n      this._iconSetConfigs.clear();\n\n      this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n\n  }, {\n    key: \"_getSvgFromConfig\",\n    value: function _getSvgFromConfig(config) {\n      if (config.svgText) {\n        // We already have the SVG element for this icon, return a copy.\n        return of(cloneSvg(this._svgElementFromConfig(config)));\n      } else {\n        // Fetch the icon from the config's URL, cache it, and return a copy.\n        return this._loadSvgIconFromConfig(config).pipe(map(function (svg) {\n          return cloneSvg(svg);\n        }));\n      }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n\n  }, {\n    key: \"_getSvgFromIconSetConfigs\",\n    value: function _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n      var _this2 = this;\n\n      // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n      // requested name.\n      var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (namedIcon) {\n        // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n        // time anyway, there's probably not much advantage compared to just always extracting\n        // it from the icon set.\n        return of(namedIcon);\n      } // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n      // fetched, fetch them now and look for iconName in the results.\n\n\n      var iconSetFetchRequests = iconSetConfigs.filter(function (iconSetConfig) {\n        return !iconSetConfig.svgText;\n      }).map(function (iconSetConfig) {\n        return _this2._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError(function (err) {\n          var url = _this2._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url); // Swallow errors fetching individual URLs so the\n          // combined Observable won't necessarily fail.\n\n\n          var errorMessage = \"Loading icon set URL: \".concat(url, \" failed: \").concat(err.message);\n\n          _this2._errorHandler.handleError(new Error(errorMessage));\n\n          return of(null);\n        }));\n      }); // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n      // cached SVG element (unless the request failed), and we can check again for the icon.\n\n      return forkJoin(iconSetFetchRequests).pipe(map(function () {\n        var foundIcon = _this2._extractIconWithNameFromAnySet(name, iconSetConfigs); // TODO: add an ngDevMode check\n\n\n        if (!foundIcon) {\n          throw getMatIconNameNotFoundError(name);\n        }\n\n        return foundIcon;\n      }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n\n  }, {\n    key: \"_extractIconWithNameFromAnySet\",\n    value: function _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n      // Iterate backwards, so icon sets added later have precedence.\n      for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\n        var config = iconSetConfigs[i]; // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n        // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n        // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n        // some of the parsing.\n\n        if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n          var svg = this._svgElementFromConfig(config);\n\n          var foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n\n          if (foundIcon) {\n            return foundIcon;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n\n  }, {\n    key: \"_loadSvgIconFromConfig\",\n    value: function _loadSvgIconFromConfig(config) {\n      var _this3 = this;\n\n      return this._fetchIcon(config).pipe(tap(function (svgText) {\n        return config.svgText = svgText;\n      }), map(function () {\n        return _this3._svgElementFromConfig(config);\n      }));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n\n  }, {\n    key: \"_loadSvgIconSetFromConfig\",\n    value: function _loadSvgIconSetFromConfig(config) {\n      if (config.svgText) {\n        return of(null);\n      }\n\n      return this._fetchIcon(config).pipe(tap(function (svgText) {\n        return config.svgText = svgText;\n      }));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n\n  }, {\n    key: \"_extractSvgIconFromSet\",\n    value: function _extractSvgIconFromSet(iconSet, iconName, options) {\n      // Use the `id=\"iconName\"` syntax in order to escape special\n      // characters in the ID (versus using the #iconName syntax).\n      var iconSource = iconSet.querySelector(\"[id=\\\"\".concat(iconName, \"\\\"]\"));\n\n      if (!iconSource) {\n        return null;\n      } // Clone the element and remove the ID to prevent multiple elements from being added\n      // to the page with the same ID.\n\n\n      var iconElement = iconSource.cloneNode(true);\n      iconElement.removeAttribute('id'); // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n      // the content of a new <svg> node.\n\n      if (iconElement.nodeName.toLowerCase() === 'svg') {\n        return this._setSvgAttributes(iconElement, options);\n      } // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n      // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n      // tag is problematic on Firefox, because it needs to include the current page path.\n\n\n      if (iconElement.nodeName.toLowerCase() === 'symbol') {\n        return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n      } // createElement('SVG') doesn't work as expected; the DOM ends up with\n      // the correct nodes, but the SVG content doesn't render. Instead we\n      // have to create an empty SVG node using innerHTML and append its content.\n      // Elements created using DOMParser.parseFromString have the same problem.\n      // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n\n\n      var svg = this._svgElementFromString('<svg></svg>'); // Clone the node so we don't remove it from the parent icon set element.\n\n\n      svg.appendChild(iconElement);\n      return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n\n  }, {\n    key: \"_svgElementFromString\",\n    value: function _svgElementFromString(str) {\n      var div = this._document.createElement('DIV');\n\n      div.innerHTML = str;\n      var svg = div.querySelector('svg'); // TODO: add an ngDevMode check\n\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n\n      return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n\n  }, {\n    key: \"_toSvgElement\",\n    value: function _toSvgElement(element) {\n      var svg = this._svgElementFromString('<svg></svg>');\n\n      var attributes = element.attributes; // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n\n      for (var i = 0; i < attributes.length; i++) {\n        var _attributes$i = attributes[i],\n            name = _attributes$i.name,\n            value = _attributes$i.value;\n\n        if (name !== 'id') {\n          svg.setAttribute(name, value);\n        }\n      }\n\n      for (var _i = 0; _i < element.childNodes.length; _i++) {\n        if (element.childNodes[_i].nodeType === this._document.ELEMENT_NODE) {\n          svg.appendChild(element.childNodes[_i].cloneNode(true));\n        }\n      }\n\n      return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n\n  }, {\n    key: \"_setSvgAttributes\",\n    value: function _setSvgAttributes(svg, options) {\n      svg.setAttribute('fit', '');\n      svg.setAttribute('height', '100%');\n      svg.setAttribute('width', '100%');\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n      if (options && options.viewBox) {\n        svg.setAttribute('viewBox', options.viewBox);\n      }\n\n      return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n\n  }, {\n    key: \"_fetchIcon\",\n    value: function _fetchIcon(iconConfig) {\n      var _this4 = this;\n\n      var _a;\n\n      var safeUrl = iconConfig.url,\n          options = iconConfig.options;\n      var withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n\n      if (!this._httpClient) {\n        throw getMatIconNoHttpProviderError();\n      } // TODO: add an ngDevMode check\n\n\n      if (safeUrl == null) {\n        throw Error(\"Cannot fetch icon from URL \\\"\".concat(safeUrl, \"\\\".\"));\n      }\n\n      var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl); // TODO: add an ngDevMode check\n\n\n      if (!url) {\n        throw getMatIconFailedToSanitizeUrlError(safeUrl);\n      } // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n      // already a request in progress for that URL. It's necessary to call share() on the\n      // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n\n\n      var inProgressFetch = this._inProgressUrlFetches.get(url);\n\n      if (inProgressFetch) {\n        return inProgressFetch;\n      }\n\n      var req = this._httpClient.get(url, {\n        responseType: 'text',\n        withCredentials: withCredentials\n      }).pipe(finalize(function () {\n        return _this4._inProgressUrlFetches.delete(url);\n      }), share());\n\n      this._inProgressUrlFetches.set(url, req);\n\n      return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n\n  }, {\n    key: \"_addSvgIconConfig\",\n    value: function _addSvgIconConfig(namespace, iconName, config) {\n      this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n\n      return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n\n  }, {\n    key: \"_addSvgIconSetConfig\",\n    value: function _addSvgIconSetConfig(namespace, config) {\n      var configNamespace = this._iconSetConfigs.get(namespace);\n\n      if (configNamespace) {\n        configNamespace.push(config);\n      } else {\n        this._iconSetConfigs.set(namespace, [config]);\n      }\n\n      return this;\n    }\n    /** Parses a config's text into an SVG element. */\n\n  }, {\n    key: \"_svgElementFromConfig\",\n    value: function _svgElementFromConfig(config) {\n      if (!config.svgElement) {\n        var svg = this._svgElementFromString(config.svgText);\n\n        this._setSvgAttributes(svg, config.options);\n\n        config.svgElement = svg;\n      }\n\n      return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n\n  }, {\n    key: \"_getIconConfigFromResolvers\",\n    value: function _getIconConfigFromResolvers(namespace, name) {\n      for (var i = 0; i < this._resolvers.length; i++) {\n        var result = this._resolvers[i](name, namespace);\n\n        if (result) {\n          return isSafeUrlWithOptions(result) ? new SvgIconConfig(result.url, null, result.options) : new SvgIconConfig(result, null);\n        }\n      }\n\n      return undefined;\n    }\n  }]);\n\n  return MatIconRegistry;\n}();\n\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) {\n  return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler));\n};\n\nMatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function MatIconRegistry_Factory() {\n    return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler));\n  },\n  token: MatIconRegistry,\n  providedIn: \"root\"\n});\n\nMatIconRegistry.ctorParameters = function () {\n  return [{\n    type: HttpClient,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: DomSanitizer\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: ErrorHandler\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.HttpClient,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc2.DomSanitizer\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }];\n  }, null);\n})();\n/** @docs-private */\n\n\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\n\n\nvar ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), HttpClient], DomSanitizer, ErrorHandler, [new Optional(), DOCUMENT]],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/** Clones an SVGElement while preserving type information. */\n\nfunction cloneSvg(svg) {\n  return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\n\n\nfunction iconKey(namespace, name) {\n  return namespace + ':' + name;\n}\n\nfunction isSafeUrlWithOptions(value) {\n  return !!(value.url && value.options);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n\n/** @docs-private */\n\n\nvar _MatIconBase = mixinColor( /*#__PURE__*/function () {\n  function _class(_elementRef) {\n    _classCallCheck(this, _class);\n\n    this._elementRef = _elementRef;\n  }\n\n  return _class;\n}());\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\n\n\nvar MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_ICON_LOCATION_FACTORY() {\n  var _document = inject(DOCUMENT);\n\n  var _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: function getPathname() {\n      return _location ? _location.pathname + _location.search : '';\n    }\n  };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\n\n\nvar funcIriAttributes = ['clip-path', 'color-profile', 'src', 'cursor', 'fill', 'filter', 'marker', 'marker-start', 'marker-mid', 'marker-end', 'mask', 'stroke'];\n\nvar ɵ0 = function ɵ0(attr) {\n  return \"[\".concat(attr, \"]\");\n};\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\n\n\nvar funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\n\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n\nvar MatIcon = /*#__PURE__*/function (_MatIconBase2) {\n  _inherits(MatIcon, _MatIconBase2);\n\n  var _super = _createSuper(MatIcon);\n\n  function MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n    var _this5;\n\n    _classCallCheck(this, MatIcon);\n\n    _this5 = _super.call(this, elementRef);\n    _this5._iconRegistry = _iconRegistry;\n    _this5._location = _location;\n    _this5._errorHandler = _errorHandler;\n    _this5._inline = false;\n    /** Subscription to the current in-progress SVG icon request. */\n\n    _this5._currentIconFetch = Subscription.EMPTY; // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n\n    return _this5;\n  }\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n\n\n  _createClass(MatIcon, [{\n    key: \"inline\",\n    get: function get() {\n      return this._inline;\n    },\n    set: function set(inline) {\n      this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n\n  }, {\n    key: \"svgIcon\",\n    get: function get() {\n      return this._svgIcon;\n    },\n    set: function set(value) {\n      if (value !== this._svgIcon) {\n        if (value) {\n          this._updateSvgIcon(value);\n        } else if (this._svgIcon) {\n          this._clearSvgElement();\n        }\n\n        this._svgIcon = value;\n      }\n    }\n    /** Font set that the icon is a part of. */\n\n  }, {\n    key: \"fontSet\",\n    get: function get() {\n      return this._fontSet;\n    },\n    set: function set(value) {\n      var newValue = this._cleanupFontValue(value);\n\n      if (newValue !== this._fontSet) {\n        this._fontSet = newValue;\n\n        this._updateFontIconClasses();\n      }\n    }\n    /** Name of an icon within a font set. */\n\n  }, {\n    key: \"fontIcon\",\n    get: function get() {\n      return this._fontIcon;\n    },\n    set: function set(value) {\n      var newValue = this._cleanupFontValue(value);\n\n      if (newValue !== this._fontIcon) {\n        this._fontIcon = newValue;\n\n        this._updateFontIconClasses();\n      }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n\n  }, {\n    key: \"_splitIconName\",\n    value: function _splitIconName(iconName) {\n      if (!iconName) {\n        return ['', ''];\n      }\n\n      var parts = iconName.split(':');\n\n      switch (parts.length) {\n        case 1:\n          return ['', parts[0]];\n        // Use default namespace.\n\n        case 2:\n          return parts;\n\n        default:\n          throw Error(\"Invalid icon name: \\\"\".concat(iconName, \"\\\"\"));\n        // TODO: add an ngDevMode check\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n      // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n      this._updateFontIconClasses();\n    }\n  }, {\n    key: \"ngAfterViewChecked\",\n    value: function ngAfterViewChecked() {\n      var cachedElements = this._elementsWithExternalReferences;\n\n      if (cachedElements && cachedElements.size) {\n        var newPath = this._location.getPathname(); // We need to check whether the URL has changed on each change detection since\n        // the browser doesn't have an API that will let us react on link clicks and\n        // we can't depend on the Angular router. The references need to be updated,\n        // because while most browsers don't care whether the URL is correct after\n        // the first render, Safari will break if the user navigates to a different\n        // page and the SVG isn't re-rendered.\n\n\n        if (newPath !== this._previousPath) {\n          this._previousPath = newPath;\n\n          this._prependPathToReferences(newPath);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._currentIconFetch.unsubscribe();\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      }\n    }\n  }, {\n    key: \"_usingFontIcon\",\n    value: function _usingFontIcon() {\n      return !this.svgIcon;\n    }\n  }, {\n    key: \"_setSvgElement\",\n    value: function _setSvgElement(svg) {\n      this._clearSvgElement(); // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n      // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n      // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n\n\n      var styleTags = svg.querySelectorAll('style');\n\n      for (var i = 0; i < styleTags.length; i++) {\n        styleTags[i].textContent += ' ';\n      } // Note: we do this fix here, rather than the icon registry, because the\n      // references have to point to the URL at the time that the icon was created.\n\n\n      var path = this._location.getPathname();\n\n      this._previousPath = path;\n\n      this._cacheChildrenWithExternalReferences(svg);\n\n      this._prependPathToReferences(path);\n\n      this._elementRef.nativeElement.appendChild(svg);\n    }\n  }, {\n    key: \"_clearSvgElement\",\n    value: function _clearSvgElement() {\n      var layoutElement = this._elementRef.nativeElement;\n      var childCount = layoutElement.childNodes.length;\n\n      if (this._elementsWithExternalReferences) {\n        this._elementsWithExternalReferences.clear();\n      } // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n      // we can't use innerHTML, because IE will throw if the element has a data binding.\n\n\n      while (childCount--) {\n        var child = layoutElement.childNodes[childCount]; // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n        // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n\n        if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n          layoutElement.removeChild(child);\n        }\n      }\n    }\n  }, {\n    key: \"_updateFontIconClasses\",\n    value: function _updateFontIconClasses() {\n      if (!this._usingFontIcon()) {\n        return;\n      }\n\n      var elem = this._elementRef.nativeElement;\n      var fontSetClass = this.fontSet ? this._iconRegistry.classNameForFontAlias(this.fontSet) : this._iconRegistry.getDefaultFontSetClass();\n\n      if (fontSetClass != this._previousFontSetClass) {\n        if (this._previousFontSetClass) {\n          elem.classList.remove(this._previousFontSetClass);\n        }\n\n        if (fontSetClass) {\n          elem.classList.add(fontSetClass);\n        }\n\n        this._previousFontSetClass = fontSetClass;\n      }\n\n      if (this.fontIcon != this._previousFontIconClass) {\n        if (this._previousFontIconClass) {\n          elem.classList.remove(this._previousFontIconClass);\n        }\n\n        if (this.fontIcon) {\n          elem.classList.add(this.fontIcon);\n        }\n\n        this._previousFontIconClass = this.fontIcon;\n      }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n\n  }, {\n    key: \"_cleanupFontValue\",\n    value: function _cleanupFontValue(value) {\n      return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n\n  }, {\n    key: \"_prependPathToReferences\",\n    value: function _prependPathToReferences(path) {\n      var elements = this._elementsWithExternalReferences;\n\n      if (elements) {\n        elements.forEach(function (attrs, element) {\n          attrs.forEach(function (attr) {\n            element.setAttribute(attr.name, \"url('\".concat(path, \"#\").concat(attr.value, \"')\"));\n          });\n        });\n      }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n\n  }, {\n    key: \"_cacheChildrenWithExternalReferences\",\n    value: function _cacheChildrenWithExternalReferences(element) {\n      var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n      var elements = this._elementsWithExternalReferences = this._elementsWithExternalReferences || new Map();\n\n      var _loop = function _loop(i) {\n        funcIriAttributes.forEach(function (attr) {\n          var elementWithReference = elementsWithFuncIri[i];\n          var value = elementWithReference.getAttribute(attr);\n          var match = value ? value.match(funcIriPattern) : null;\n\n          if (match) {\n            var attributes = elements.get(elementWithReference);\n\n            if (!attributes) {\n              attributes = [];\n              elements.set(elementWithReference, attributes);\n            }\n\n            attributes.push({\n              name: attr,\n              value: match[1]\n            });\n          }\n        });\n      };\n\n      for (var i = 0; i < elementsWithFuncIri.length; i++) {\n        _loop(i);\n      }\n    }\n    /** Sets a new SVG icon with a particular name. */\n\n  }, {\n    key: \"_updateSvgIcon\",\n    value: function _updateSvgIcon(rawName) {\n      var _this6 = this;\n\n      this._svgNamespace = null;\n      this._svgName = null;\n\n      this._currentIconFetch.unsubscribe();\n\n      if (rawName) {\n        var _this$_splitIconName = this._splitIconName(rawName),\n            _this$_splitIconName2 = _slicedToArray(_this$_splitIconName, 2),\n            namespace = _this$_splitIconName2[0],\n            iconName = _this$_splitIconName2[1];\n\n        if (namespace) {\n          this._svgNamespace = namespace;\n        }\n\n        if (iconName) {\n          this._svgName = iconName;\n        }\n\n        this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(function (svg) {\n          return _this6._setSvgElement(svg);\n        }, function (err) {\n          var errorMessage = \"Error retrieving icon \".concat(namespace, \":\").concat(iconName, \"! \").concat(err.message);\n\n          _this6._errorHandler.handleError(new Error(errorMessage));\n        });\n      }\n    }\n  }]);\n\n  return MatIcon;\n}(_MatIconBase);\n\nMatIcon.ɵfac = function MatIcon_Factory(t) {\n  return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler));\n};\n\nMatIcon.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatIcon,\n  selectors: [[\"mat-icon\"]],\n  hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"],\n  hostVars: 7,\n  hostBindings: function MatIcon_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n      ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    }\n  },\n  inputs: {\n    color: \"color\",\n    inline: \"inline\",\n    svgIcon: \"svgIcon\",\n    fontSet: \"fontSet\",\n    fontIcon: \"fontIcon\"\n  },\n  exportAs: [\"matIcon\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function MatIcon_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatIcon.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: MatIconRegistry\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['aria-hidden']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_ICON_LOCATION]\n    }]\n  }, {\n    type: ErrorHandler\n  }];\n};\n\nMatIcon.propDecorators = {\n  inline: [{\n    type: Input\n  }],\n  svgIcon: [{\n    type: Input\n  }],\n  fontSet: [{\n    type: Input\n  }],\n  fontIcon: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n    type: Component,\n    args: [{\n      template: '<ng-content></ng-content>',\n      selector: 'mat-icon',\n      exportAs: 'matIcon',\n      inputs: ['color'],\n      host: {\n        'role': 'img',\n        'class': 'mat-icon notranslate',\n        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n        '[class.mat-icon-inline]': 'inline',\n        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: MatIconRegistry\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['aria-hidden']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_ICON_LOCATION]\n      }]\n    }, {\n      type: ɵngcc0.ErrorHandler\n    }];\n  }, {\n    inline: [{\n      type: Input\n    }],\n    svgIcon: [{\n      type: Input\n    }],\n    fontSet: [{\n      type: Input\n    }],\n    fontIcon: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatIconModule = function MatIconModule() {\n  _classCallCheck(this, MatIconModule);\n};\n\nMatIconModule.ɵfac = function MatIconModule_Factory(t) {\n  return new (t || MatIconModule)();\n};\n\nMatIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatIconModule\n});\nMatIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: [MatIcon, MatCommonModule],\n      declarations: [MatIcon]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, {\n    declarations: function declarations() {\n      return [MatIcon];\n    },\n    imports: function imports() {\n      return [MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatIcon, MatCommonModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 }; //# sourceMappingURL=icon.js.map","map":{"version":3,"sources":["C:/Users/Bex/Desktop/teretanaproj/teretanafe/node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js"],"names":["i0","SecurityContext","Injectable","Optional","Inject","ErrorHandler","SkipSelf","InjectionToken","inject","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","Input","NgModule","mixinColor","MatCommonModule","coerceBooleanProperty","i3","DOCUMENT","of","throwError","forkJoin","Subscription","tap","map","catchError","finalize","share","take","i1","HttpClient","i2","DomSanitizer","ɵngcc0","ɵngcc1","ɵngcc2","_c0","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","svgText","options","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","resolver","push","cleanLiteral","sanitize","HTML","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","foundIcon","i","length","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","_a","withCredentials","inProgressFetch","req","responseType","delete","configNamespace","svgElement","result","isSafeUrlWithOptions","undefined","ɵfac","MatIconRegistry_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","provide","deps","useFactory","_MatIconBase","_elementRef","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","elementRef","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","nativeElement","inline","_svgIcon","_updateSvgIcon","_clearSvgElement","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","_fontIcon","parts","split","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","svgIcon","styleTags","querySelectorAll","textContent","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","_usingFontIcon","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","classList","remove","add","fontIcon","_previousFontIconClass","trim","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","_splitIconName","getNamedSvgIcon","subscribe","_setSvgElement","MatIcon_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","hostVars","hostBindings","MatIcon_HostBindings","rf","ctx","ɵɵattribute","ɵɵclassProp","color","inputs","exportAs","features","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","template","MatIcon_Template","ɵɵprojectionDef","ɵɵprojection","styles","encapsulation","changeDetection","String","propDecorators","selector","host","None","OnPush","MatIconModule","MatIconModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, ErrorHandler, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', cleanLiteral, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, className = alias) {\n        this._fontCssClassesByAlias.set(alias, className);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className) {\n        this._defaultFontSetClass = className;\n        return this;\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => config.svgText = svgText));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString('<svg></svg>');\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        var _a;\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = (_a = options === null || options === void 0 ? void 0 : options.withCredentials) !== null && _a !== void 0 ? _a : false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result) ?\n                    new SvgIconConfig(result.url, null, result.options) :\n                    new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler)); };\nMatIconRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(i0.ɵɵinject(i1.HttpClient, 8), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i3.DOCUMENT, 8), i0.ɵɵinject(i0.ErrorHandler)); }, token: MatIconRegistry, providedIn: \"root\" });\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, null); })();\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => _location ? (_location.pathname + _location.search) : ''\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = attr => `[${attr}]`;\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() { return this._svgIcon; }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() { return this._fontSet; }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() { return this._fontIcon; }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return parts;\n            default: throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        const styleTags = svg.querySelectorAll('style');\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler)); };\nMatIcon.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 7, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"data-mat-icon-type\", ctx._usingFontIcon() ? \"font\" : \"svg\")(\"data-mat-icon-name\", ctx._svgName || ctx.fontIcon)(\"data-mat-icon-namespace\", ctx._svgNamespace || ctx.fontSet);\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                    '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                    '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler }]; }, { inline: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatIconModule {\n}\nMatIconModule.ɵfac = function MatIconModule_Factory(t) { return new (t || MatIconModule)(); };\nMatIconModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, ɵ0 };\n\n//# sourceMappingURL=icon.js.map"]},"metadata":{},"sourceType":"module"}