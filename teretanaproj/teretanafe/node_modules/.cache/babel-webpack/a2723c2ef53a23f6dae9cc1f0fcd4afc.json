{"ast":null,"code":"import _inherits from \"/home/user/Documents/local/lekarife/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/user/Documents/local/lekarife/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"/home/user/Documents/local/lekarife/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/user/Documents/local/lekarife/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/local/lekarife/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nvar matTooltipAnimations = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [state('initial, void, hidden', style({\n    opacity: 0,\n    transform: 'scale(0)'\n  })), state('visible', style({\n    transform: 'scale(1)'\n  })), transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([style({\n    opacity: 0,\n    transform: 'scale(0)',\n    offset: 0\n  }), style({\n    opacity: 0.5,\n    transform: 'scale(0.99)',\n    offset: 0.5\n  }), style({\n    opacity: 1,\n    transform: 'scale(1)',\n    offset: 1\n  })]))), transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 0\n  })))])\n};\n/** Time in ms to throttle repositioning after scroll events. */\n\nvar SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\n\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nvar PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\n\nvar passiveListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\n\nvar LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\n\nfunction getMatTooltipInvalidPositionError(position) {\n  return Error(\"Tooltip position \\\"\".concat(position, \"\\\" is invalid.\"));\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.reposition({\n      scrollThrottle: SCROLL_THROTTLE_MS\n    });\n  };\n}\n/** @docs-private */\n\n\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\n\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n  providedIn: 'root',\n  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500\n  };\n}\n\nvar _MatTooltipBase = /*#__PURE__*/function () {\n  function _MatTooltipBase(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n    var _this = this;\n\n    _classCallCheck(this, _MatTooltipBase);\n\n    this._overlay = _overlay;\n    this._elementRef = _elementRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._viewContainerRef = _viewContainerRef;\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    this._ariaDescriber = _ariaDescriber;\n    this._focusMonitor = _focusMonitor;\n    this._dir = _dir;\n    this._defaultOptions = _defaultOptions;\n    this._position = 'below';\n    this._disabled = false;\n    this._viewInitialized = false;\n    this._pointerExitEventsInitialized = false;\n    this._viewportMargin = 8;\n    this._cssClassPrefix = 'mat';\n    /** The default delay in ms before showing the tooltip after show is called */\n\n    this.showDelay = this._defaultOptions.showDelay;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n\n    this.hideDelay = this._defaultOptions.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     */\n\n    this.touchGestures = 'auto';\n    this._message = '';\n    /** Manually-bound passive event listeners. */\n\n    this._passiveListeners = [];\n    /** Emits when the component is destroyed. */\n\n    this._destroyed = new Subject();\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     */\n\n    this._handleKeydown = function (event) {\n      if (_this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        _this._ngZone.run(function () {\n          return _this.hide(0);\n        });\n      }\n    };\n\n    this._scrollStrategy = scrollStrategy;\n    this._document = _document;\n\n    if (_defaultOptions) {\n      if (_defaultOptions.position) {\n        this.position = _defaultOptions.position;\n      }\n\n      if (_defaultOptions.touchGestures) {\n        this.touchGestures = _defaultOptions.touchGestures;\n      }\n    }\n\n    _dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () {\n      if (_this._overlayRef) {\n        _this._updatePosition(_this._overlayRef);\n      }\n    });\n\n    _ngZone.runOutsideAngular(function () {\n      _elementRef.nativeElement.addEventListener('keydown', _this._handleKeydown);\n    });\n  }\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n\n\n  _createClass(_MatTooltipBase, [{\n    key: \"position\",\n    get: function get() {\n      return this._position;\n    },\n    set: function set(value) {\n      var _a;\n\n      if (value !== this._position) {\n        this._position = value;\n\n        if (this._overlayRef) {\n          this._updatePosition(this._overlayRef);\n\n          (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    /** Disables the display of the tooltip. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value); // If tooltip is disabled, hide immediately.\n\n      if (this._disabled) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n      }\n    }\n    /** The message to be displayed in the tooltip */\n\n  }, {\n    key: \"message\",\n    get: function get() {\n      return this._message;\n    },\n    set: function set(value) {\n      var _this2 = this;\n\n      this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip'); // If the message is not a string (e.g. number), convert it to a string and trim it.\n      // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n      // away the string-conversion: https://github.com/angular/components/issues/20684\n\n\n      this._message = value != null ? String(value).trim() : '';\n\n      if (!this._message && this._isTooltipVisible()) {\n        this.hide(0);\n      } else {\n        this._setupPointerEnterEventsIfNeeded();\n\n        this._updateTooltipMessage();\n\n        this._ngZone.runOutsideAngular(function () {\n          // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n          // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n          // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n          // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n          Promise.resolve().then(function () {\n            _this2._ariaDescriber.describe(_this2._elementRef.nativeElement, _this2.message, 'tooltip');\n          });\n        });\n      }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n\n  }, {\n    key: \"tooltipClass\",\n    get: function get() {\n      return this._tooltipClass;\n    },\n    set: function set(value) {\n      this._tooltipClass = value;\n\n      if (this._tooltipInstance) {\n        this._setTooltipClass(this._tooltipClass);\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this3 = this;\n\n      // This needs to happen after view init so the initial values for all inputs have been set.\n      this._viewInitialized = true;\n\n      this._setupPointerEnterEventsIfNeeded();\n\n      this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n        // Note that the focus monitor runs outside the Angular zone.\n        if (!origin) {\n          _this3._ngZone.run(function () {\n            return _this3.hide(0);\n          });\n        } else if (origin === 'keyboard') {\n          _this3._ngZone.run(function () {\n            return _this3.show();\n          });\n        }\n      });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var nativeElement = this._elementRef.nativeElement;\n      clearTimeout(this._touchstartTimeout);\n\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n\n        this._tooltipInstance = null;\n      } // Clean up the event listeners set in the constructor\n\n\n      nativeElement.removeEventListener('keydown', this._handleKeydown);\n\n      this._passiveListeners.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            event = _ref2[0],\n            listener = _ref2[1];\n\n        nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n      });\n\n      this._passiveListeners.length = 0;\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n\n      this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n\n      this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this4 = this;\n\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.showDelay;\n\n      if (this.disabled || !this.message || this._isTooltipVisible() && !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId) {\n        return;\n      }\n\n      var overlayRef = this._createOverlay();\n\n      this._detach();\n\n      this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n      this._tooltipInstance = overlayRef.attach(this._portal).instance;\n\n      this._tooltipInstance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this4._detach();\n      });\n\n      this._setTooltipClass(this._tooltipClass);\n\n      this._updateTooltipMessage();\n\n      this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hideDelay;\n\n      if (this._tooltipInstance) {\n        this._tooltipInstance.hide(delay);\n      }\n    }\n    /** Shows/hides the tooltip */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n\n  }, {\n    key: \"_isTooltipVisible\",\n    value: function _isTooltipVisible() {\n      return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n\n  }, {\n    key: \"_createOverlay\",\n    value: function _createOverlay() {\n      var _this5 = this;\n\n      if (this._overlayRef) {\n        return this._overlayRef;\n      }\n\n      var scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef); // Create connected position strategy that listens for scroll events to reposition.\n\n\n      var strategy = this._overlay.position().flexibleConnectedTo(this._elementRef).withTransformOriginOn(\".\".concat(this._cssClassPrefix, \"-tooltip\")).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);\n\n      strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n        _this5._updateCurrentPositionClass(change.connectionPair);\n\n        if (_this5._tooltipInstance) {\n          if (change.scrollableViewProperties.isOverlayClipped && _this5._tooltipInstance.isVisible()) {\n            // After position changes occur and the overlay is clipped by\n            // a parent scrollable then close the tooltip.\n            _this5._ngZone.run(function () {\n              return _this5.hide(0);\n            });\n          }\n        }\n      });\n      this._overlayRef = this._overlay.create({\n        direction: this._dir,\n        positionStrategy: strategy,\n        panelClass: \"\".concat(this._cssClassPrefix, \"-\").concat(PANEL_CLASS),\n        scrollStrategy: this._scrollStrategy()\n      });\n\n      this._updatePosition(this._overlayRef);\n\n      this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        return _this5._detach();\n      });\n\n      this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(function () {\n        var _a;\n\n        return (_a = _this5._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction();\n      });\n\n      return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n      }\n\n      this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n\n  }, {\n    key: \"_updatePosition\",\n    value: function _updatePosition(overlayRef) {\n      var position = overlayRef.getConfig().positionStrategy;\n\n      var origin = this._getOrigin();\n\n      var overlay = this._getOverlayPosition();\n\n      position.withPositions([this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)), this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n\n  }, {\n    key: \"_addOffset\",\n    value: function _addOffset(position) {\n      return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n\n  }, {\n    key: \"_getOrigin\",\n    value: function _getOrigin() {\n      var isLtr = !this._dir || this._dir.value == 'ltr';\n      var position = this.position;\n      var originPosition;\n\n      if (position == 'above' || position == 'below') {\n        originPosition = {\n          originX: 'center',\n          originY: position == 'above' ? 'top' : 'bottom'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        originPosition = {\n          originX: 'start',\n          originY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        originPosition = {\n          originX: 'end',\n          originY: 'center'\n        };\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition = this._invertPosition(originPosition.originX, originPosition.originY),\n          x = _this$_invertPosition.x,\n          y = _this$_invertPosition.y;\n\n      return {\n        main: originPosition,\n        fallback: {\n          originX: x,\n          originY: y\n        }\n      };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n\n  }, {\n    key: \"_getOverlayPosition\",\n    value: function _getOverlayPosition() {\n      var isLtr = !this._dir || this._dir.value == 'ltr';\n      var position = this.position;\n      var overlayPosition;\n\n      if (position == 'above') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'bottom'\n        };\n      } else if (position == 'below') {\n        overlayPosition = {\n          overlayX: 'center',\n          overlayY: 'top'\n        };\n      } else if (position == 'before' || position == 'left' && isLtr || position == 'right' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'end',\n          overlayY: 'center'\n        };\n      } else if (position == 'after' || position == 'right' && isLtr || position == 'left' && !isLtr) {\n        overlayPosition = {\n          overlayX: 'start',\n          overlayY: 'center'\n        };\n      } else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        throw getMatTooltipInvalidPositionError(position);\n      }\n\n      var _this$_invertPosition2 = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY),\n          x = _this$_invertPosition2.x,\n          y = _this$_invertPosition2.y;\n\n      return {\n        main: overlayPosition,\n        fallback: {\n          overlayX: x,\n          overlayY: y\n        }\n      };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n\n  }, {\n    key: \"_updateTooltipMessage\",\n    value: function _updateTooltipMessage() {\n      var _this6 = this;\n\n      // Must wait for the message to be painted to the tooltip so that the overlay can properly\n      // calculate the correct positioning based on the size of the text.\n      if (this._tooltipInstance) {\n        this._tooltipInstance.message = this.message;\n\n        this._tooltipInstance._markForCheck();\n\n        this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n          if (_this6._tooltipInstance) {\n            _this6._overlayRef.updatePosition();\n          }\n        });\n      }\n    }\n    /** Updates the tooltip class */\n\n  }, {\n    key: \"_setTooltipClass\",\n    value: function _setTooltipClass(tooltipClass) {\n      if (this._tooltipInstance) {\n        this._tooltipInstance.tooltipClass = tooltipClass;\n\n        this._tooltipInstance._markForCheck();\n      }\n    }\n    /** Inverts an overlay position. */\n\n  }, {\n    key: \"_invertPosition\",\n    value: function _invertPosition(x, y) {\n      if (this.position === 'above' || this.position === 'below') {\n        if (y === 'top') {\n          y = 'bottom';\n        } else if (y === 'bottom') {\n          y = 'top';\n        }\n      } else {\n        if (x === 'end') {\n          x = 'start';\n        } else if (x === 'start') {\n          x = 'end';\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n\n  }, {\n    key: \"_updateCurrentPositionClass\",\n    value: function _updateCurrentPositionClass(connectionPair) {\n      var overlayY = connectionPair.overlayY,\n          originX = connectionPair.originX,\n          originY = connectionPair.originY;\n      var newPosition; // If the overlay is in the middle along the Y axis,\n      // it means that it's either before or after.\n\n      if (overlayY === 'center') {\n        // Note that since this information is used for styling, we want to\n        // resolve `start` and `end` to their real values, otherwise consumers\n        // would have to remember to do it themselves on each consumption.\n        if (this._dir && this._dir.value === 'rtl') {\n          newPosition = originX === 'end' ? 'left' : 'right';\n        } else {\n          newPosition = originX === 'start' ? 'left' : 'right';\n        }\n      } else {\n        newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n      }\n\n      if (newPosition !== this._currentPosition) {\n        var overlayRef = this._overlayRef;\n\n        if (overlayRef) {\n          var classPrefix = \"\".concat(this._cssClassPrefix, \"-\").concat(PANEL_CLASS, \"-\");\n          overlayRef.removePanelClass(classPrefix + this._currentPosition);\n          overlayRef.addPanelClass(classPrefix + newPosition);\n        }\n\n        this._currentPosition = newPosition;\n      }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n\n  }, {\n    key: \"_setupPointerEnterEventsIfNeeded\",\n    value: function _setupPointerEnterEventsIfNeeded() {\n      var _this7 = this;\n\n      // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n      if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {\n        return;\n      } // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n      // first tap from firing its click event or can cause the tooltip to open for clicks.\n\n\n      if (this._platformSupportsMouseEvents()) {\n        this._passiveListeners.push(['mouseenter', function () {\n          _this7._setupPointerExitEventsIfNeeded();\n\n          _this7.show();\n        }]);\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n\n        this._passiveListeners.push(['touchstart', function () {\n          // Note that it's important that we don't `preventDefault` here,\n          // because it can prevent click events from firing on the element.\n          _this7._setupPointerExitEventsIfNeeded();\n\n          clearTimeout(_this7._touchstartTimeout);\n          _this7._touchstartTimeout = setTimeout(function () {\n            return _this7.show();\n          }, LONGPRESS_DELAY);\n        }]);\n      }\n\n      this._addListeners(this._passiveListeners);\n    }\n  }, {\n    key: \"_setupPointerExitEventsIfNeeded\",\n    value: function _setupPointerExitEventsIfNeeded() {\n      var _this8 = this,\n          _this$_passiveListene;\n\n      if (this._pointerExitEventsInitialized) {\n        return;\n      }\n\n      this._pointerExitEventsInitialized = true;\n      var exitListeners = [];\n\n      if (this._platformSupportsMouseEvents()) {\n        exitListeners.push(['mouseleave', function () {\n          return _this8.hide();\n        }], ['wheel', function (event) {\n          return _this8._wheelListener(event);\n        }]);\n      } else if (this.touchGestures !== 'off') {\n        this._disableNativeGesturesIfNecessary();\n\n        var touchendListener = function touchendListener() {\n          clearTimeout(_this8._touchstartTimeout);\n\n          _this8.hide(_this8._defaultOptions.touchendHideDelay);\n        };\n\n        exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n      }\n\n      this._addListeners(exitListeners);\n\n      (_this$_passiveListene = this._passiveListeners).push.apply(_this$_passiveListene, exitListeners);\n    }\n  }, {\n    key: \"_addListeners\",\n    value: function _addListeners(listeners) {\n      var _this9 = this;\n\n      listeners.forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            event = _ref4[0],\n            listener = _ref4[1];\n\n        _this9._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n      });\n    }\n  }, {\n    key: \"_platformSupportsMouseEvents\",\n    value: function _platformSupportsMouseEvents() {\n      return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n\n  }, {\n    key: \"_wheelListener\",\n    value: function _wheelListener(event) {\n      if (this._isTooltipVisible()) {\n        var elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n\n        var element = this._elementRef.nativeElement; // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n        // won't fire if the user scrolls away using the wheel without moving their cursor. We\n        // work around it by finding the element under the user's cursor and closing the tooltip\n        // if it's not the trigger.\n\n        if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n          this.hide();\n        }\n      }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n\n  }, {\n    key: \"_disableNativeGesturesIfNecessary\",\n    value: function _disableNativeGesturesIfNecessary() {\n      var gestures = this.touchGestures;\n\n      if (gestures !== 'off') {\n        var element = this._elementRef.nativeElement;\n        var _style = element.style; // If gestures are set to `auto`, we don't disable text selection on inputs and\n        // textareas, because it prevents the user from typing into them on iOS Safari.\n\n        if (gestures === 'on' || element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA') {\n          _style.userSelect = _style.msUserSelect = _style.webkitUserSelect = _style.MozUserSelect = 'none';\n        } // If we have `auto` gestures and the element uses native HTML dragging,\n        // we don't set `-webkit-user-drag` because it prevents the native behavior.\n\n\n        if (gestures === 'on' || !element.draggable) {\n          _style.webkitUserDrag = 'none';\n        }\n\n        _style.touchAction = 'none';\n        _style.webkitTapHighlightColor = 'transparent';\n      }\n    }\n  }]);\n\n  return _MatTooltipBase;\n}();\n\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) {\n  return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\n_MatTooltipBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _MatTooltipBase,\n  inputs: {\n    showDelay: [\"matTooltipShowDelay\", \"showDelay\"],\n    hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"],\n    touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"],\n    position: [\"matTooltipPosition\", \"position\"],\n    disabled: [\"matTooltipDisabled\", \"disabled\"],\n    message: [\"matTooltip\", \"message\"],\n    tooltipClass: [\"matTooltipClass\", \"tooltipClass\"]\n  }\n});\n\n_MatTooltipBase.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: AriaDescriber\n  }, {\n    type: FocusMonitor\n  }, {\n    type: undefined\n  }, {\n    type: Directionality\n  }, {\n    type: undefined\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n_MatTooltipBase.propDecorators = {\n  position: [{\n    type: Input,\n    args: ['matTooltipPosition']\n  }],\n  disabled: [{\n    type: Input,\n    args: ['matTooltipDisabled']\n  }],\n  showDelay: [{\n    type: Input,\n    args: ['matTooltipShowDelay']\n  }],\n  hideDelay: [{\n    type: Input,\n    args: ['matTooltipHideDelay']\n  }],\n  touchGestures: [{\n    type: Input,\n    args: ['matTooltipTouchGestures']\n  }],\n  message: [{\n    type: Input,\n    args: ['matTooltip']\n  }],\n  tooltipClass: [{\n    type: Input,\n    args: ['matTooltipClass']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined\n    }, {\n      type: ɵngcc5.Directionality\n    }, {\n      type: undefined\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    showDelay: [{\n      type: Input,\n      args: ['matTooltipShowDelay']\n    }],\n    hideDelay: [{\n      type: Input,\n      args: ['matTooltipHideDelay']\n    }],\n    touchGestures: [{\n      type: Input,\n      args: ['matTooltipTouchGestures']\n    }],\n    position: [{\n      type: Input,\n      args: ['matTooltipPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['matTooltipDisabled']\n    }],\n    message: [{\n      type: Input,\n      args: ['matTooltip']\n    }],\n    tooltipClass: [{\n      type: Input,\n      args: ['matTooltipClass']\n    }]\n  });\n})();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n\n\nvar MatTooltip = /*#__PURE__*/function (_MatTooltipBase2) {\n  _inherits(MatTooltip, _MatTooltipBase2);\n\n  var _super = _createSuper(MatTooltip);\n\n  function MatTooltip(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n    var _this10;\n\n    _classCallCheck(this, MatTooltip);\n\n    _this10 = _super.call(this, overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n    _this10._tooltipComponent = TooltipComponent;\n    return _this10;\n  }\n\n  return MatTooltip;\n}(_MatTooltipBase);\n\nMatTooltip.ɵfac = function MatTooltip_Factory(t) {\n  return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nMatTooltip.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTooltip,\n  selectors: [[\"\", \"matTooltip\", \"\"]],\n  hostAttrs: [1, \"mat-tooltip-trigger\"],\n  exportAs: [\"matTooltip\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatTooltip.ctorParameters = function () {\n  return [{\n    type: Overlay\n  }, {\n    type: ElementRef\n  }, {\n    type: ScrollDispatcher\n  }, {\n    type: ViewContainerRef\n  }, {\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: AriaDescriber\n  }, {\n    type: FocusMonitor\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n    }]\n  }, {\n    type: Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n    type: Directive,\n    args: [{\n      selector: '[matTooltip]',\n      exportAs: 'matTooltip',\n      host: {\n        'class': 'mat-tooltip-trigger'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Overlay\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc2.ScrollDispatcher\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc3.Platform\n    }, {\n      type: ɵngcc4.AriaDescriber\n    }, {\n      type: ɵngcc4.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc5.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nvar _TooltipComponentBase = /*#__PURE__*/function () {\n  function _TooltipComponentBase(_changeDetectorRef) {\n    _classCallCheck(this, _TooltipComponentBase);\n\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Property watched by the animation framework to show or hide the tooltip */\n\n    this._visibility = 'initial';\n    /** Whether interactions on the page should close the tooltip */\n\n    this._closeOnInteraction = false;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n\n    this._onHide = new Subject();\n  }\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n\n\n  _createClass(_TooltipComponentBase, [{\n    key: \"show\",\n    value: function show(delay) {\n      var _this11 = this;\n\n      // Cancel the delayed hide if it is scheduled\n      clearTimeout(this._hideTimeoutId); // Body interactions should cancel the tooltip if there is a delay in showing.\n\n      this._closeOnInteraction = true;\n      this._showTimeoutId = setTimeout(function () {\n        _this11._visibility = 'visible';\n        _this11._showTimeoutId = undefined;\n\n        _this11._onShow(); // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n\n        _this11._markForCheck();\n      }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide(delay) {\n      var _this12 = this;\n\n      // Cancel the delayed show if it is scheduled\n      clearTimeout(this._showTimeoutId);\n      this._hideTimeoutId = setTimeout(function () {\n        _this12._visibility = 'hidden';\n        _this12._hideTimeoutId = undefined; // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n\n        _this12._markForCheck();\n      }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n\n  }, {\n    key: \"afterHidden\",\n    value: function afterHidden() {\n      return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return this._visibility === 'visible';\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      clearTimeout(this._showTimeoutId);\n      clearTimeout(this._hideTimeoutId);\n\n      this._onHide.complete();\n    }\n  }, {\n    key: \"_animationStart\",\n    value: function _animationStart() {\n      this._closeOnInteraction = false;\n    }\n  }, {\n    key: \"_animationDone\",\n    value: function _animationDone(event) {\n      var toState = event.toState;\n\n      if (toState === 'hidden' && !this.isVisible()) {\n        this._onHide.next();\n      }\n\n      if (toState === 'visible' || toState === 'hidden') {\n        this._closeOnInteraction = true;\n      }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n\n  }, {\n    key: \"_handleBodyInteraction\",\n    value: function _handleBodyInteraction() {\n      if (this._closeOnInteraction) {\n        this.hide(0);\n      }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n\n  }, {\n    key: \"_onShow\",\n    value: function _onShow() {}\n  }]);\n\n  return _TooltipComponentBase;\n}();\n\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) {\n  return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n};\n\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: _TooltipComponentBase\n});\n\n_TooltipComponentBase.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n\n\nvar TooltipComponent = /*#__PURE__*/function (_TooltipComponentBase2) {\n  _inherits(TooltipComponent, _TooltipComponentBase2);\n\n  var _super2 = _createSuper(TooltipComponent);\n\n  function TooltipComponent(changeDetectorRef, _breakpointObserver) {\n    var _this13;\n\n    _classCallCheck(this, TooltipComponent);\n\n    _this13 = _super2.call(this, changeDetectorRef);\n    _this13._breakpointObserver = _breakpointObserver;\n    /** Stream that emits whether the user has a handset-sized display.  */\n\n    _this13._isHandset = _this13._breakpointObserver.observe(Breakpoints.Handset);\n    return _this13;\n  }\n\n  return TooltipComponent;\n}(_TooltipComponentBase);\n\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) {\n  return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver));\n};\n\nTooltipComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: TooltipComponent,\n  selectors: [[\"mat-tooltip-component\"]],\n  hostAttrs: [\"aria-hidden\", \"true\"],\n  hostVars: 2,\n  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    }\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]],\n  template: function TooltipComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() {\n        return ctx._animationStart();\n      })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) {\n        return ctx._animationDone($event);\n      });\n      ɵngcc0.ɵɵpipe(1, \"async\");\n      ɵngcc0.ɵɵtext(2);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      var tmp_0_0;\n      ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n      ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n      ɵngcc0.ɵɵadvance(2);\n      ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    }\n  },\n  directives: [ɵngcc7.NgClass],\n  pipes: [ɵngcc7.AsyncPipe],\n  styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matTooltipAnimations.tooltipState]\n  },\n  changeDetection: 0\n});\n\nTooltipComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: BreakpointObserver\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tooltip-component',\n      template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [matTooltipAnimations.tooltipState],\n      host: {\n        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n        'aria-hidden': 'true'\n      },\n      styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc6.BreakpointObserver\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatTooltipModule = function MatTooltipModule() {\n  _classCallCheck(this, MatTooltipModule);\n};\n\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) {\n  return new (t || MatTooltipModule)();\n};\n\nMatTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTooltipModule\n});\nMatTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[A11yModule, CommonModule, OverlayModule, MatCommonModule], MatCommonModule, CdkScrollableModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],\n      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n      declarations: [MatTooltip, TooltipComponent],\n      entryComponents: [TooltipComponent],\n      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, {\n    declarations: function declarations() {\n      return [MatTooltip, TooltipComponent];\n    },\n    imports: function imports() {\n      return [A11yModule, CommonModule, OverlayModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations }; //# sourceMappingURL=tooltip.js.map","map":{"version":3,"sources":["/home/user/Documents/local/lekarife/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js"],"names":["Overlay","OverlayModule","AriaDescriber","FocusMonitor","A11yModule","DOCUMENT","CommonModule","InjectionToken","Directive","ElementRef","ViewContainerRef","NgZone","Inject","Input","Optional","ChangeDetectorRef","Component","ViewEncapsulation","ChangeDetectionStrategy","NgModule","MatCommonModule","ScrollDispatcher","CdkScrollableModule","Directionality","coerceBooleanProperty","ESCAPE","hasModifierKey","Breakpoints","BreakpointObserver","normalizePassiveListenerOptions","Platform","ComponentPortal","Subject","takeUntil","take","trigger","state","style","transition","animate","keyframes","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","matTooltipAnimations","tooltipState","opacity","transform","offset","SCROLL_THROTTLE_MS","TOOLTIP_PANEL_CLASS","PANEL_CLASS","passiveListenerOptions","passive","LONGPRESS_DELAY","getMatTooltipInvalidPositionError","position","Error","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","useFactory","MAT_TOOLTIP_DEFAULT_OPTIONS","providedIn","factory","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","showDelay","hideDelay","touchendHideDelay","_MatTooltipBase","_overlay","_elementRef","_scrollDispatcher","_viewContainerRef","_ngZone","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_document","_position","_disabled","_viewInitialized","_pointerExitEventsInitialized","_viewportMargin","_cssClassPrefix","touchGestures","_message","_passiveListeners","_destroyed","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","run","hide","_scrollStrategy","change","pipe","subscribe","_overlayRef","_updatePosition","runOutsideAngular","nativeElement","addEventListener","value","_a","_tooltipInstance","show","updatePosition","_setupPointerEnterEventsIfNeeded","removeDescription","String","trim","_updateTooltipMessage","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","monitor","origin","clearTimeout","_touchstartTimeout","dispose","removeEventListener","forEach","listener","length","next","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","_tooltipComponent","attach","instance","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","_updateCurrentPositionClass","connectionPair","scrollableViewProperties","isOverlayClipped","create","direction","positionStrategy","panelClass","detachments","outsidePointerEvents","_handleBodyInteraction","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","_addOffset","Object","assign","main","fallback","isLtr","originPosition","originX","originY","ngDevMode","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","tooltipClass","newPosition","_currentPosition","classPrefix","removePanelClass","addPanelClass","_platformSupportsMouseEvents","push","_setupPointerExitEventsIfNeeded","_disableNativeGesturesIfNecessary","setTimeout","_addListeners","exitListeners","_wheelListener","touchendListener","listeners","IOS","ANDROID","elementUnderPointer","elementFromPoint","clientX","clientY","element","contains","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵfac","_MatTooltipBase_Factory","t","ɵɵdirectiveInject","undefined","ɵdir","ɵɵdefineDirective","type","inputs","ctorParameters","decorators","args","propDecorators","ɵsetClassMetadata","MatTooltip","elementRef","scrollDispatcher","viewContainerRef","ngZone","platform","ariaDescriber","focusMonitor","dir","defaultOptions","TooltipComponent","MatTooltip_Factory","selectors","hostAttrs","exportAs","features","ɵɵInheritDefinitionFeature","selector","host","_TooltipComponentBase","_changeDetectorRef","_visibility","_closeOnInteraction","_onHide","_onShow","toState","markForCheck","_TooltipComponentBase_Factory","changeDetectorRef","_breakpointObserver","_isHandset","observe","Handset","TooltipComponent_Factory","ɵcmp","ɵɵdefineComponent","hostVars","hostBindings","TooltipComponent_HostBindings","rf","ctx","ɵɵstyleProp","decls","vars","consts","template","TooltipComponent_Template","ɵɵelementStart","ɵɵlistener","TooltipComponent_Template_div_animation_state_start_0_listener","_animationStart","TooltipComponent_Template_div_animation_state_done_0_listener","$event","_animationDone","ɵɵpipe","ɵɵtext","ɵɵelementEnd","tmp_0_0","ɵɵclassProp","ɵɵpipeBind1","matches","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate","directives","NgClass","pipes","AsyncPipe","styles","encapsulation","data","animation","changeDetection","None","OnPush","animations","MatTooltipModule","MatTooltipModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","exports","declarations","entryComponents","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Input, Optional, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/** Time in ms to throttle repositioning after scroll events. */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @deprecated\n * @breaking-change 13.0.0 remove this variable\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\nconst PANEL_CLASS = 'tooltip-panel';\n/** Options used to bind passive event listeners. */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/** @docs-private */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/** @docs-private */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** Injection token to be used to override the default options for `matTooltip`. */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\nclass _MatTooltipBase {\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        this._viewInitialized = false;\n        this._pointerExitEventsInitialized = false;\n        this._viewportMargin = 8;\n        this._cssClassPrefix = 'mat';\n        /** The default delay in ms before showing the tooltip after show is called */\n        this.showDelay = this._defaultOptions.showDelay;\n        /** The default delay in ms before hiding the tooltip after hide is called */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /** Manually-bound passive event listeners. */\n        this._passiveListeners = [];\n        /** Emits when the component is destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run(() => this.hide(0));\n            }\n        };\n        this._scrollStrategy = scrollStrategy;\n        this._document = _document;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n            }\n        });\n        _ngZone.runOutsideAngular(() => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        });\n    }\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    get position() { return this._position; }\n    set position(value) {\n        var _a;\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition(this._overlayRef);\n                (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a.show(0);\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /** Disables the display of the tooltip. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n        }\n    }\n    /** The message to be displayed in the tooltip */\n    get message() { return this._message; }\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, 'tooltip');\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        // Must convert with `String(value)`, not `${value}`, otherwise Closure Compiler optimises\n        // away the string-conversion: https://github.com/angular/components/issues/20684\n        this._message = value != null ? String(value).trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._setupPointerEnterEventsIfNeeded();\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular(() => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then(() => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, 'tooltip');\n                });\n            });\n        }\n    }\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    get tooltipClass() { return this._tooltipClass; }\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    ngAfterViewInit() {\n        // This needs to happen after view init so the initial values for all inputs have been set.\n        this._viewInitialized = true;\n        this._setupPointerEnterEventsIfNeeded();\n        this._focusMonitor.monitor(this._elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                this._ngZone.run(() => this.hide(0));\n            }\n            else if (origin === 'keyboard') {\n                this._ngZone.run(() => this.show());\n            }\n        });\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy() {\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach(([event, listener]) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        });\n        this._passiveListeners.length = 0;\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message, 'tooltip');\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !this._tooltipInstance._showTimeoutId && !this._tooltipInstance._hideTimeoutId)) {\n            return;\n        }\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal ||\n            new ComponentPortal(this._tooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        this._tooltipInstance.show(delay);\n    }\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /** Shows/hides the tooltip */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /** Create the overlay config and position strategy */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`)\n            .withFlexibleDimensions(false)\n            .withViewportMargin(this._viewportMargin)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n            this._updateCurrentPositionClass(change.connectionPair);\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide(0));\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition(this._overlayRef);\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n        this._overlayRef.outsidePointerEvents()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => { var _a; return (_a = this._tooltipInstance) === null || _a === void 0 ? void 0 : _a._handleBodyInteraction(); });\n        return this._overlayRef;\n    }\n    /** Detaches the currently-attached tooltip. */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /** Updates the position of the current tooltip. */\n    _updatePosition(overlayRef) {\n        const position = overlayRef.getConfig().positionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            this._addOffset(Object.assign(Object.assign({}, origin.main), overlay.main)),\n            this._addOffset(Object.assign(Object.assign({}, origin.fallback), overlay.fallback))\n        ]);\n    }\n    /** Adds the configured offset to a position. Used as a hook for child classes. */\n    _addOffset(position) {\n        return position;\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition() {\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        const position = this.position;\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                if (this._tooltipInstance) {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n    }\n    /** Updates the tooltip class */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /** Inverts an overlay position. */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /** Updates the class on the overlay panel based on the current position of the tooltip. */\n    _updateCurrentPositionClass(connectionPair) {\n        const { overlayY, originX, originY } = connectionPair;\n        let newPosition;\n        // If the overlay is in the middle along the Y axis,\n        // it means that it's either before or after.\n        if (overlayY === 'center') {\n            // Note that since this information is used for styling, we want to\n            // resolve `start` and `end` to their real values, otherwise consumers\n            // would have to remember to do it themselves on each consumption.\n            if (this._dir && this._dir.value === 'rtl') {\n                newPosition = originX === 'end' ? 'left' : 'right';\n            }\n            else {\n                newPosition = originX === 'start' ? 'left' : 'right';\n            }\n        }\n        else {\n            newPosition = overlayY === 'bottom' && originY === 'top' ? 'above' : 'below';\n        }\n        if (newPosition !== this._currentPosition) {\n            const overlayRef = this._overlayRef;\n            if (overlayRef) {\n                const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;\n                overlayRef.removePanelClass(classPrefix + this._currentPosition);\n                overlayRef.addPanelClass(classPrefix + newPosition);\n            }\n            this._currentPosition = newPosition;\n        }\n    }\n    /** Binds the pointer events to the tooltip trigger. */\n    _setupPointerEnterEventsIfNeeded() {\n        // Optimization: Defer hooking up events if there's no message or the tooltip is disabled.\n        if (this._disabled || !this.message || !this._viewInitialized ||\n            this._passiveListeners.length) {\n            return;\n        }\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (this._platformSupportsMouseEvents()) {\n            this._passiveListeners\n                .push(['mouseenter', () => {\n                    this._setupPointerExitEventsIfNeeded();\n                    this.show();\n                }]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            this._passiveListeners\n                .push(['touchstart', () => {\n                    // Note that it's important that we don't `preventDefault` here,\n                    // because it can prevent click events from firing on the element.\n                    this._setupPointerExitEventsIfNeeded();\n                    clearTimeout(this._touchstartTimeout);\n                    this._touchstartTimeout = setTimeout(() => this.show(), LONGPRESS_DELAY);\n                }]);\n        }\n        this._addListeners(this._passiveListeners);\n    }\n    _setupPointerExitEventsIfNeeded() {\n        if (this._pointerExitEventsInitialized) {\n            return;\n        }\n        this._pointerExitEventsInitialized = true;\n        const exitListeners = [];\n        if (this._platformSupportsMouseEvents()) {\n            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', event => this._wheelListener(event)]);\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            const touchendListener = () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            };\n            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);\n        }\n        this._addListeners(exitListeners);\n        this._passiveListeners.push(...exitListeners);\n    }\n    _addListeners(listeners) {\n        listeners.forEach(([event, listener]) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        });\n    }\n    _platformSupportsMouseEvents() {\n        return !this._platform.IOS && !this._platform.ANDROID;\n    }\n    /** Listener for the `wheel` event on the element. */\n    _wheelListener(event) {\n        if (this._isTooltipVisible()) {\n            const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);\n            const element = this._elementRef.nativeElement;\n            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it\n            // won't fire if the user scrolls away using the wheel without moving their cursor. We\n            // work around it by finding the element under the user's cursor and closing the tooltip\n            // if it's not the trigger.\n            if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {\n                this.hide();\n            }\n        }\n    }\n    /** Disables the native browser gestures, based on how the tooltip has been configured. */\n    _disableNativeGesturesIfNecessary() {\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            const element = this._elementRef.nativeElement;\n            const style = element.style;\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    style.MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                style.webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\n_MatTooltipBase.ɵfac = function _MatTooltipBase_Factory(t) { return new (t || _MatTooltipBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\n_MatTooltipBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatTooltipBase, inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] } });\n_MatTooltipBase.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined },\n    { type: Directionality },\n    { type: undefined },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n_MatTooltipBase.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatTooltipBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined }, { type: ɵngcc5.Directionality }, { type: undefined }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip extends _MatTooltipBase {\n    constructor(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document) {\n        super(overlay, elementRef, scrollDispatcher, viewContainerRef, ngZone, platform, ariaDescriber, focusMonitor, scrollStrategy, dir, defaultOptions, _document);\n        this._tooltipComponent = TooltipComponent;\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nMatTooltip.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], hostAttrs: [1, \"mat-tooltip-trigger\"], exportAs: [\"matTooltip\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip',\n                host: {\n                    'class': 'mat-tooltip-trigger'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nclass _TooltipComponentBase {\n    constructor(_changeDetectorRef) {\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Property watched by the animation framework to show or hide the tooltip */\n        this._visibility = 'initial';\n        /** Whether interactions on the page should close the tooltip */\n        this._closeOnInteraction = false;\n        /** Subject for notifying that the tooltip has been hidden from the view */\n        this._onHide = new Subject();\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        clearTimeout(this._hideTimeoutId);\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(() => {\n            this._visibility = 'visible';\n            this._showTimeoutId = undefined;\n            this._onShow();\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        clearTimeout(this._showTimeoutId);\n        this._hideTimeoutId = setTimeout(() => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = undefined;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, delay);\n    }\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden() {\n        return this._onHide;\n    }\n    /** Whether the tooltip is being displayed. */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    ngOnDestroy() {\n        clearTimeout(this._showTimeoutId);\n        clearTimeout(this._hideTimeoutId);\n        this._onHide.complete();\n    }\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    _animationDone(event) {\n        const toState = event.toState;\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Callback for when the timeout in this.show() gets completed.\n     * This method is only needed by the mdc-tooltip, and so it is only implemented\n     * in the mdc-tooltip, not here.\n     */\n    _onShow() { }\n}\n_TooltipComponentBase.ɵfac = function _TooltipComponentBase_Factory(t) { return new (t || _TooltipComponentBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_TooltipComponentBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _TooltipComponentBase });\n_TooltipComponentBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_TooltipComponentBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, null); })();\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nclass TooltipComponent extends _TooltipComponentBase {\n    constructor(changeDetectorRef, _breakpointObserver) {\n        super(changeDetectorRef);\n        this._breakpointObserver = _breakpointObserver;\n        /** Stream that emits whether the user has a handset-sized display.  */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        let tmp_0_0;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵfac = function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); };\nMatTooltipModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ], MatCommonModule, CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip, TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, _MatTooltipBase, _TooltipComponentBase, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map"]},"metadata":{},"sourceType":"module"}