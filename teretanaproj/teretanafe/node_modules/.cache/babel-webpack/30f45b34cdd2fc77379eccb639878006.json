{"ast":null,"code":"import _classCallCheck from \"/home/user/Documents/local/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/local/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Used to generate unique ID for each accordion. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nvar nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nvar CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n\nvar CdkAccordion = /*#__PURE__*/function () {\n  function CdkAccordion() {\n    _classCallCheck(this, CdkAccordion);\n\n    /** Emits when the state of the accordion changes */\n    this._stateChanges = new Subject();\n    /** Stream that emits true/false when openAll/closeAll is triggered. */\n\n    this._openCloseAllActions = new Subject();\n    /** A readonly id value to use for unique selection coordination. */\n\n    this.id = \"cdk-accordion-\".concat(nextId$1++);\n    this._multi = false;\n  }\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n\n\n  _createClass(CdkAccordion, [{\n    key: \"multi\",\n    get: function get() {\n      return this._multi;\n    },\n    set: function set(multi) {\n      this._multi = coerceBooleanProperty(multi);\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n\n  }, {\n    key: \"openAll\",\n    value: function openAll() {\n      if (this._multi) {\n        this._openCloseAllActions.next(true);\n      }\n    }\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n\n  }, {\n    key: \"closeAll\",\n    value: function closeAll() {\n      this._openCloseAllActions.next(false);\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      this._stateChanges.next(changes);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._stateChanges.complete();\n\n      this._openCloseAllActions.complete();\n    }\n  }]);\n\n  return CdkAccordion;\n}();\n\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) {\n  return new (t || CdkAccordion)();\n};\n\nCdkAccordion.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordion,\n  selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]],\n  inputs: {\n    multi: \"multi\"\n  },\n  exportAs: [\"cdkAccordion\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CDK_ACCORDION,\n    useExisting: CdkAccordion\n  }]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\nCdkAccordion.propDecorators = {\n  multi: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion, [cdkAccordion]',\n      exportAs: 'cdkAccordion',\n      providers: [{\n        provide: CDK_ACCORDION,\n        useExisting: CdkAccordion\n      }]\n    }]\n  }], function () {\n    return [];\n  }, {\n    multi: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Used to generate unique ID for each accordion item. */\n\n\nvar nextId = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n\nvar CdkAccordionItem = /*#__PURE__*/function () {\n  function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n    var _this = this;\n\n    _classCallCheck(this, CdkAccordionItem);\n\n    this.accordion = accordion;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._expansionDispatcher = _expansionDispatcher;\n    /** Subscription to openAll/closeAll events. */\n\n    this._openCloseAllSubscription = Subscription.EMPTY;\n    /** Event emitted every time the AccordionItem is closed. */\n\n    this.closed = new EventEmitter();\n    /** Event emitted every time the AccordionItem is opened. */\n\n    this.opened = new EventEmitter();\n    /** Event emitted when the AccordionItem is destroyed. */\n\n    this.destroyed = new EventEmitter();\n    /**\n     * Emits whenever the expanded state of the accordion changes.\n     * Primarily used to facilitate two-way binding.\n     * @docs-private\n     */\n\n    this.expandedChange = new EventEmitter();\n    /** The unique AccordionItem id. */\n\n    this.id = \"cdk-accordion-child-\".concat(nextId++);\n    this._expanded = false;\n    this._disabled = false;\n    /** Unregister function for _expansionDispatcher. */\n\n    this._removeUniqueSelectionListener = function () {};\n\n    this._removeUniqueSelectionListener = _expansionDispatcher.listen(function (id, accordionId) {\n      if (_this.accordion && !_this.accordion.multi && _this.accordion.id === accordionId && _this.id !== id) {\n        _this.expanded = false;\n      }\n    }); // When an accordion item is hosted in an accordion, subscribe to open/close events.\n\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n  /** Whether the AccordionItem is expanded. */\n\n\n  _createClass(CdkAccordionItem, [{\n    key: \"expanded\",\n    get: function get() {\n      return this._expanded;\n    },\n    set: function set(expanded) {\n      expanded = coerceBooleanProperty(expanded); // Only emit events and update the internal value if the value changes.\n\n      if (this._expanded !== expanded) {\n        this._expanded = expanded;\n        this.expandedChange.emit(expanded);\n\n        if (expanded) {\n          this.opened.emit();\n          /**\n           * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n           * the name value is the id of the accordion.\n           */\n\n          var accordionId = this.accordion ? this.accordion.id : this.id;\n\n          this._expansionDispatcher.notify(this.id, accordionId);\n        } else {\n          this.closed.emit();\n        } // Ensures that the animation will run when the value is set outside of an `@Input`.\n        // This includes cases like the open, close and toggle methods.\n\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the AccordionItem is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(disabled) {\n      this._disabled = coerceBooleanProperty(disabled);\n    }\n    /** Emits an event for the accordion item being destroyed. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.opened.complete();\n      this.closed.complete();\n      this.destroyed.emit();\n      this.destroyed.complete();\n\n      this._removeUniqueSelectionListener();\n\n      this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (!this.disabled) {\n        this.expanded = !this.expanded;\n      }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (!this.disabled) {\n        this.expanded = false;\n      }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      if (!this.disabled) {\n        this.expanded = true;\n      }\n    }\n  }, {\n    key: \"_subscribeToOpenCloseAllActions\",\n    value: function _subscribeToOpenCloseAllActions() {\n      var _this2 = this;\n\n      return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n        // Only change expanded state if item is enabled\n        if (!_this2.disabled) {\n          _this2.expanded = expanded;\n        }\n      });\n    }\n  }]);\n\n  return CdkAccordionItem;\n}();\n\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) {\n  return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CDK_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher));\n};\n\nCdkAccordionItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAccordionItem,\n  selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]],\n  inputs: {\n    expanded: \"expanded\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    closed: \"closed\",\n    opened: \"opened\",\n    destroyed: \"destroyed\",\n    expandedChange: \"expandedChange\"\n  },\n  exportAs: [\"cdkAccordionItem\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([// Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n  // registering to the same accordion.\n  {\n    provide: CDK_ACCORDION,\n    useValue: ɵ0\n  }])]\n});\n\nCdkAccordionItem.ctorParameters = function () {\n  return [{\n    type: CdkAccordion,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [CDK_ACCORDION]\n    }, {\n      type: SkipSelf\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: UniqueSelectionDispatcher\n  }];\n};\n\nCdkAccordionItem.propDecorators = {\n  closed: [{\n    type: Output\n  }],\n  opened: [{\n    type: Output\n  }],\n  destroyed: [{\n    type: Output\n  }],\n  expandedChange: [{\n    type: Output\n  }],\n  expanded: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n    type: Directive,\n    args: [{\n      selector: 'cdk-accordion-item, [cdkAccordionItem]',\n      exportAs: 'cdkAccordionItem',\n      providers: [// Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n      // registering to the same accordion.\n      {\n        provide: CDK_ACCORDION,\n        useValue: ɵ0\n      }]\n    }]\n  }], function () {\n    return [{\n      type: CdkAccordion,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_ACCORDION]\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc1.UniqueSelectionDispatcher\n    }];\n  }, {\n    closed: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    expandedChange: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar CdkAccordionModule = function CdkAccordionModule() {\n  _classCallCheck(this, CdkAccordionModule);\n};\n\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) {\n  return new (t || CdkAccordionModule)();\n};\n\nCdkAccordionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: CdkAccordionModule\n});\nCdkAccordionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CdkAccordion, CdkAccordionItem],\n      declarations: [CdkAccordion, CdkAccordionItem]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, {\n    declarations: [CdkAccordion, CdkAccordionItem],\n    exports: [CdkAccordion, CdkAccordionItem]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule, CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a }; //# sourceMappingURL=accordion.js.map","map":{"version":3,"sources":["/home/user/Documents/local/teretanaproj/teretanafe/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/accordion.js"],"names":["InjectionToken","Directive","Input","EventEmitter","Optional","Inject","SkipSelf","ChangeDetectorRef","Output","NgModule","UniqueSelectionDispatcher","coerceBooleanProperty","Subject","Subscription","ɵngcc0","ɵngcc1","nextId$1","CDK_ACCORDION","CdkAccordion","_stateChanges","_openCloseAllActions","id","_multi","multi","next","changes","complete","ɵfac","CdkAccordion_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","propDecorators","ngDevMode","ɵsetClassMetadata","args","selector","providers","nextId","ɵ0","undefined","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","expanded","_subscribeToOpenCloseAllActions","emit","notify","markForCheck","disabled","unsubscribe","subscribe","CdkAccordionItem_Factory","ɵɵdirectiveInject","outputs","useValue","ctorParameters","decorators","CdkAccordionModule","CdkAccordionModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","ɵangular_material_src_cdk_accordion_accordion_a"],"mappings":"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","sourcesContent":["import { InjectionToken, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        this._multi = false;\n    }\n    /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n    get multi() { return this._multi; }\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this._multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n}\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkAccordion.propDecorators = {\n    multi: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion',\n                providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }]\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\nconst ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen((id, accordionId) => {\n                if (this.accordion && !this.accordion.multi &&\n                    this.accordion.id === accordionId && this.id !== id) {\n                    this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Whether the AccordionItem is expanded. */\n    get expanded() { return this._expanded; }\n    set expanded(expanded) {\n        expanded = coerceBooleanProperty(expanded);\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the AccordionItem is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n}\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CDK_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: ɵ0 },\n        ])] });\nCdkAccordionItem.ctorParameters = () => [\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: Inject, args: [CDK_ACCORDION,] }, { type: SkipSelf }] },\n    { type: ChangeDetectorRef },\n    { type: UniqueSelectionDispatcher }\n];\nCdkAccordionItem.propDecorators = {\n    closed: [{ type: Output }],\n    opened: [{ type: Output }],\n    destroyed: [{ type: Output }],\n    expandedChange: [{ type: Output }],\n    expanded: [{ type: Input }],\n    disabled: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                    // registering to the same accordion.\n                    { provide: CDK_ACCORDION, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_ACCORDION]\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass CdkAccordionModule {\n}\nCdkAccordionModule.ɵfac = function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); };\nCdkAccordionModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule, CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a };\n\n//# sourceMappingURL=accordion.js.map"]},"metadata":{},"sourceType":"module"}