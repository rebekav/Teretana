{"ast":null,"code":"import _classCallCheck from \"/home/user/Documents/local/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Documents/local/teretanaproj/teretanafe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Options to pass to the animationstart listener. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\n\nvar AutofillMonitor = /*#__PURE__*/function () {\n  function AutofillMonitor(_platform, _ngZone) {\n    _classCallCheck(this, AutofillMonitor);\n\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._monitoredElements = new Map();\n  }\n\n  _createClass(AutofillMonitor, [{\n    key: \"monitor\",\n    value: function monitor(elementOrRef) {\n      var _this = this;\n\n      if (!this._platform.isBrowser) {\n        return EMPTY;\n      }\n\n      var element = coerceElement(elementOrRef);\n\n      var info = this._monitoredElements.get(element);\n\n      if (info) {\n        return info.subject;\n      }\n\n      var result = new Subject();\n      var cssClass = 'cdk-text-field-autofilled';\n\n      var listener = function listener(event) {\n        // Animation events fire on initial element render, we check for the presence of the autofill\n        // CSS class to make sure this is a real change in state, not just the initial render before\n        // we fire off events.\n        if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n          element.classList.add(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target: event.target,\n              isAutofilled: true\n            });\n          });\n        } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n          element.classList.remove(cssClass);\n\n          _this._ngZone.run(function () {\n            return result.next({\n              target: event.target,\n              isAutofilled: false\n            });\n          });\n        }\n      };\n\n      this._ngZone.runOutsideAngular(function () {\n        element.addEventListener('animationstart', listener, listenerOptions);\n        element.classList.add('cdk-text-field-autofill-monitored');\n      });\n\n      this._monitoredElements.set(element, {\n        subject: result,\n        unlisten: function unlisten() {\n          element.removeEventListener('animationstart', listener, listenerOptions);\n        }\n      });\n\n      return result;\n    }\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(elementOrRef) {\n      var element = coerceElement(elementOrRef);\n\n      var info = this._monitoredElements.get(element);\n\n      if (info) {\n        info.unlisten();\n        info.subject.complete();\n        element.classList.remove('cdk-text-field-autofill-monitored');\n        element.classList.remove('cdk-text-field-autofilled');\n\n        this._monitoredElements.delete(element);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this2 = this;\n\n      this._monitoredElements.forEach(function (_info, element) {\n        return _this2.stopMonitoring(element);\n      });\n    }\n  }]);\n\n  return AutofillMonitor;\n}();\n\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) {\n  return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nAutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function AutofillMonitor_Factory() {\n    return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone));\n  },\n  token: AutofillMonitor,\n  providedIn: \"root\"\n});\n\nAutofillMonitor.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\n\n\nvar CdkAutofill = /*#__PURE__*/function () {\n  function CdkAutofill(_elementRef, _autofillMonitor) {\n    _classCallCheck(this, CdkAutofill);\n\n    this._elementRef = _elementRef;\n    this._autofillMonitor = _autofillMonitor;\n    /** Emits when the autofill state of the element changes. */\n\n    this.cdkAutofill = new EventEmitter();\n  }\n\n  _createClass(CdkAutofill, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this3 = this;\n\n      this._autofillMonitor.monitor(this._elementRef).subscribe(function (event) {\n        return _this3.cdkAutofill.emit(event);\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n  }]);\n\n  return CdkAutofill;\n}();\n\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) {\n  return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor));\n};\n\nCdkAutofill.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAutofill,\n  selectors: [[\"\", \"cdkAutofill\", \"\"]],\n  outputs: {\n    cdkAutofill: \"cdkAutofill\"\n  }\n});\n\nCdkAutofill.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: AutofillMonitor\n  }];\n};\n\nCdkAutofill.propDecorators = {\n  cdkAutofill: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAutofill]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: AutofillMonitor\n    }];\n  }, {\n    cdkAutofill: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Directive to automatically resize a textarea to fit its content. */\n\n\nvar CdkTextareaAutosize = /*#__PURE__*/function () {\n  function CdkTextareaAutosize(_elementRef, _platform, _ngZone,\n  /** @breaking-change 11.0.0 make document required */\n  document) {\n    var _this4 = this;\n\n    _classCallCheck(this, CdkTextareaAutosize);\n\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._ngZone = _ngZone;\n    this._destroyed = new Subject();\n    this._enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n\n    this._previousMinRows = -1;\n    this._isViewInited = false;\n    /** Handles `focus` and `blur` events. */\n\n    this._handleFocusEvent = function (event) {\n      _this4._hasFocus = event.type === 'focus';\n    };\n\n    this._document = document;\n    this._textareaElement = this._elementRef.nativeElement;\n  }\n  /** Minimum amount of rows in the textarea. */\n\n\n  _createClass(CdkTextareaAutosize, [{\n    key: \"minRows\",\n    get: function get() {\n      return this._minRows;\n    },\n    set: function set(value) {\n      this._minRows = coerceNumberProperty(value);\n\n      this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n\n  }, {\n    key: \"maxRows\",\n    get: function get() {\n      return this._maxRows;\n    },\n    set: function set(value) {\n      this._maxRows = coerceNumberProperty(value);\n\n      this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n\n  }, {\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      value = coerceBooleanProperty(value); // Only act if the actual value changed. This specifically helps to not run\n      // resizeToFitContent too early (i.e. before ngAfterViewInit)\n\n      if (this._enabled !== value) {\n        (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n      }\n    }\n  }, {\n    key: \"placeholder\",\n    get: function get() {\n      return this._textareaElement.placeholder;\n    },\n    set: function set(value) {\n      this._cachedPlaceholderHeight = undefined;\n      this._textareaElement.placeholder = value;\n\n      this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n\n  }, {\n    key: \"_setMinHeight\",\n    value: function _setMinHeight() {\n      var minHeight = this.minRows && this._cachedLineHeight ? \"\".concat(this.minRows * this._cachedLineHeight, \"px\") : null;\n\n      if (minHeight) {\n        this._textareaElement.style.minHeight = minHeight;\n      }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n\n  }, {\n    key: \"_setMaxHeight\",\n    value: function _setMaxHeight() {\n      var maxHeight = this.maxRows && this._cachedLineHeight ? \"\".concat(this.maxRows * this._cachedLineHeight, \"px\") : null;\n\n      if (maxHeight) {\n        this._textareaElement.style.maxHeight = maxHeight;\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this5 = this;\n\n      if (this._platform.isBrowser) {\n        // Remember the height which we started with in case autosizing is disabled\n        this._initialHeight = this._textareaElement.style.height;\n        this.resizeToFitContent();\n\n        this._ngZone.runOutsideAngular(function () {\n          var window = _this5._getWindow();\n\n          fromEvent(window, 'resize').pipe(auditTime(16), takeUntil(_this5._destroyed)).subscribe(function () {\n            return _this5.resizeToFitContent(true);\n          });\n\n          _this5._textareaElement.addEventListener('focus', _this5._handleFocusEvent);\n\n          _this5._textareaElement.addEventListener('blur', _this5._handleFocusEvent);\n        });\n\n        this._isViewInited = true;\n        this.resizeToFitContent(true);\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n\n      this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n\n      this._destroyed.next();\n\n      this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n\n  }, {\n    key: \"_cacheTextareaLineHeight\",\n    value: function _cacheTextareaLineHeight() {\n      if (this._cachedLineHeight) {\n        return;\n      } // Use a clone element because we have to override some styles.\n\n\n      var textareaClone = this._textareaElement.cloneNode(false);\n\n      textareaClone.rows = 1; // Use `position: absolute` so that this doesn't cause a browser layout and use\n      // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n      // would affect the height.\n\n      textareaClone.style.position = 'absolute';\n      textareaClone.style.visibility = 'hidden';\n      textareaClone.style.border = 'none';\n      textareaClone.style.padding = '0';\n      textareaClone.style.height = '';\n      textareaClone.style.minHeight = '';\n      textareaClone.style.maxHeight = ''; // In Firefox it happens that textarea elements are always bigger than the specified amount\n      // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n      // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n      // to hidden. This ensures that there is no invalid calculation of the line height.\n      // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n\n      textareaClone.style.overflow = 'hidden';\n\n      this._textareaElement.parentNode.appendChild(textareaClone);\n\n      this._cachedLineHeight = textareaClone.clientHeight;\n\n      this._textareaElement.parentNode.removeChild(textareaClone); // Min and max heights have to be re-calculated if the cached line height changes\n\n\n      this._setMinHeight();\n\n      this._setMaxHeight();\n    }\n  }, {\n    key: \"_measureScrollHeight\",\n    value: function _measureScrollHeight() {\n      var element = this._textareaElement;\n      var previousMargin = element.style.marginBottom || '';\n      var isFirefox = this._platform.FIREFOX;\n      var needsMarginFiller = isFirefox && this._hasFocus;\n      var measuringClass = isFirefox ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring'; // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n      // work around it by assigning a temporary margin with the same height as the `textarea` so that\n      // it occupies the same amount of space. See #23233.\n\n      if (needsMarginFiller) {\n        element.style.marginBottom = \"\".concat(element.clientHeight, \"px\");\n      } // Reset the textarea height to auto in order to shrink back to its default size.\n      // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n\n\n      element.classList.add(measuringClass); // The measuring class includes a 2px padding to workaround an issue with Chrome,\n      // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n\n      var scrollHeight = element.scrollHeight - 4;\n      element.classList.remove(measuringClass);\n\n      if (needsMarginFiller) {\n        element.style.marginBottom = previousMargin;\n      }\n\n      return scrollHeight;\n    }\n  }, {\n    key: \"_cacheTextareaPlaceholderHeight\",\n    value: function _cacheTextareaPlaceholderHeight() {\n      if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n        return;\n      }\n\n      if (!this.placeholder) {\n        this._cachedPlaceholderHeight = 0;\n        return;\n      }\n\n      var value = this._textareaElement.value;\n      this._textareaElement.value = this._textareaElement.placeholder;\n      this._cachedPlaceholderHeight = this._measureScrollHeight();\n      this._textareaElement.value = value;\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (this._platform.isBrowser) {\n        this.resizeToFitContent();\n      }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n\n  }, {\n    key: \"resizeToFitContent\",\n    value: function resizeToFitContent() {\n      var _this6 = this;\n\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      // If autosizing is disabled, just skip everything else\n      if (!this._enabled) {\n        return;\n      }\n\n      this._cacheTextareaLineHeight();\n\n      this._cacheTextareaPlaceholderHeight(); // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n      // in checking the height of the textarea.\n\n\n      if (!this._cachedLineHeight) {\n        return;\n      }\n\n      var textarea = this._elementRef.nativeElement;\n      var value = textarea.value; // Only resize if the value or minRows have changed since these calculations can be expensive.\n\n      if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n        return;\n      }\n\n      var scrollHeight = this._measureScrollHeight();\n\n      var height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0); // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n\n      textarea.style.height = \"\".concat(height, \"px\");\n\n      this._ngZone.runOutsideAngular(function () {\n        if (typeof requestAnimationFrame !== 'undefined') {\n          requestAnimationFrame(function () {\n            return _this6._scrollToCaretPosition(textarea);\n          });\n        } else {\n          setTimeout(function () {\n            return _this6._scrollToCaretPosition(textarea);\n          });\n        }\n      });\n\n      this._previousValue = value;\n      this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      // Do not try to change the textarea, if the initialHeight has not been determined yet\n      // This might potentially remove styles when reset() is called before ngAfterViewInit\n      if (this._initialHeight !== undefined) {\n        this._textareaElement.style.height = this._initialHeight;\n      }\n    } // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n\n  }, {\n    key: \"_noopInputHandler\",\n    value: function _noopInputHandler() {// no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n\n  }, {\n    key: \"_getDocument\",\n    value: function _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n\n  }, {\n    key: \"_scrollToCaretPosition\",\n    value: function _scrollToCaretPosition(textarea) {\n      var selectionStart = textarea.selectionStart,\n          selectionEnd = textarea.selectionEnd; // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n      // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n      // between the time we requested the animation frame and when it was executed.\n      // Also note that we have to assert that the textarea is focused before we set the\n      // selection range. Setting the selection range on a non-focused textarea will cause\n      // it to receive focus on IE and Edge.\n\n      if (!this._destroyed.isStopped && this._hasFocus) {\n        textarea.setSelectionRange(selectionStart, selectionEnd);\n      }\n    }\n  }]);\n\n  return CdkTextareaAutosize;\n}();\n\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) {\n  return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8));\n};\n\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTextareaAutosize,\n  selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n  hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n  hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n        return ctx._noopInputHandler();\n      });\n    }\n  },\n  inputs: {\n    minRows: [\"cdkAutosizeMinRows\", \"minRows\"],\n    maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"],\n    enabled: [\"cdkTextareaAutosize\", \"enabled\"],\n    placeholder: \"placeholder\"\n  },\n  exportAs: [\"cdkTextareaAutosize\"]\n});\n\nCdkTextareaAutosize.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Platform\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkTextareaAutosize.propDecorators = {\n  minRows: [{\n    type: Input,\n    args: ['cdkAutosizeMinRows']\n  }],\n  maxRows: [{\n    type: Input,\n    args: ['cdkAutosizeMaxRows']\n  }],\n  enabled: [{\n    type: Input,\n    args: ['cdkTextareaAutosize']\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  _noopInputHandler: [{\n    type: HostListener,\n    args: ['input']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n    type: Directive,\n    args: [{\n      selector: 'textarea[cdkTextareaAutosize]',\n      exportAs: 'cdkTextareaAutosize',\n      host: {\n        'class': 'cdk-textarea-autosize',\n        // Textarea elements that have the directive applied should have a single row by default.\n        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n        'rows': '1'\n      }\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    minRows: [{\n      type: Input,\n      args: ['cdkAutosizeMinRows']\n    }],\n    maxRows: [{\n      type: Input,\n      args: ['cdkAutosizeMaxRows']\n    }],\n    enabled: [{\n      type: Input,\n      args: ['cdkTextareaAutosize']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n      type: HostListener,\n      args: ['input']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar TextFieldModule = function TextFieldModule() {\n  _classCallCheck(this, TextFieldModule);\n};\n\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) {\n  return new (t || TextFieldModule)();\n};\n\nTextFieldModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: TextFieldModule\n});\nTextFieldModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[PlatformModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [CdkAutofill, CdkTextareaAutosize],\n      imports: [PlatformModule],\n      exports: [CdkAutofill, CdkTextareaAutosize]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, {\n    declarations: function declarations() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    },\n    imports: function imports() {\n      return [PlatformModule];\n    },\n    exports: function exports() {\n      return [CdkAutofill, CdkTextareaAutosize];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule }; //# sourceMappingURL=text-field.js.map","map":{"version":3,"sources":["/home/user/Documents/local/teretanaproj/teretanafe/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js"],"names":["i1","normalizePassiveListenerOptions","Platform","PlatformModule","i0","Injectable","NgZone","EventEmitter","Directive","ElementRef","Output","Optional","Inject","Input","HostListener","NgModule","coerceElement","coerceNumberProperty","coerceBooleanProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","ɵngcc0","ɵngcc1","listenerOptions","passive","AutofillMonitor","_platform","_ngZone","_monitoredElements","Map","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","complete","delete","forEach","_info","stopMonitoring","ɵfac","AutofillMonitor_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","ngDevMode","ɵsetClassMetadata","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","monitor","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","outputs","propDecorators","selector","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_document","_textareaElement","nativeElement","_minRows","value","_setMinHeight","_maxRows","_setMaxHeight","resizeToFitContent","reset","placeholder","_cachedPlaceholderHeight","undefined","_cacheTextareaPlaceholderHeight","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","_initialHeight","height","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","_measureScrollHeight","force","_cacheTextareaLineHeight","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","doc","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","_noopInputHandler","inputs","enabled","exportAs","decorators","host","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"mappings":";;AAAA,OAAO,KAAKA,EAAZ,MAAoB,uBAApB;AACA,SAASC,+BAAT,EAA0CC,QAA1C,EAAoDC,cAApD,QAA0E,uBAA1E;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,YAA7B,EAA2CC,SAA3C,EAAsDC,UAAtD,EAAkEC,MAAlE,EAA0EC,QAA1E,EAAoFC,MAApF,EAA4FC,KAA5F,EAAmGC,YAAnG,EAAiHC,QAAjH,QAAiI,eAAjI;AACA,SAASC,aAAT,EAAwBC,oBAAxB,EAA8CC,qBAA9C,QAA2E,uBAA3E;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,SAAzB,QAA0C,MAA1C;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,gBAArC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,IAAMC,eAAe,GAAG1B,+BAA+B,CAAC;AAAE2B,EAAAA,OAAO,EAAE;AAAX,CAAD,CAAvD;AACA;AACA;AACA;AACA;AACA;;IACMC,e;AACF,2BAAYC,SAAZ,EAAuBC,OAAvB,EAAgC;AAAA;;AAC5B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,kBAAL,GAA0B,IAAIC,GAAJ,EAA1B;AACH;;;;WACD,iBAAQC,YAAR,EAAsB;AAAA;;AAClB,UAAI,CAAC,KAAKJ,SAAL,CAAeK,SAApB,EAA+B;AAC3B,eAAOhB,KAAP;AACH;;AACD,UAAMiB,OAAO,GAAGpB,aAAa,CAACkB,YAAD,CAA7B;;AACA,UAAMG,IAAI,GAAG,KAAKL,kBAAL,CAAwBM,GAAxB,CAA4BF,OAA5B,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACN,eAAOA,IAAI,CAACE,OAAZ;AACH;;AACD,UAAMC,MAAM,GAAG,IAAIpB,OAAJ,EAAf;AACA,UAAMqB,QAAQ,GAAG,2BAAjB;;AACA,UAAMC,QAAQ,GAAI,SAAZA,QAAY,CAACC,KAAD,EAAW;AACzB;AACA;AACA;AACA,YAAIA,KAAK,CAACC,aAAN,KAAwB,+BAAxB,IACA,CAACR,OAAO,CAACS,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADL,EAC2C;AACvCL,UAAAA,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsBN,QAAtB;;AACA,UAAA,KAAI,CAACV,OAAL,CAAaiB,GAAb,CAAiB;AAAA,mBAAMR,MAAM,CAACS,IAAP,CAAY;AAAEC,cAAAA,MAAM,EAAEP,KAAK,CAACO,MAAhB;AAAwBC,cAAAA,YAAY,EAAE;AAAtC,aAAZ,CAAN;AAAA,WAAjB;AACH,SAJD,MAKK,IAAIR,KAAK,CAACC,aAAN,KAAwB,6BAAxB,IACLR,OAAO,CAACS,SAAR,CAAkBC,QAAlB,CAA2BL,QAA3B,CADC,EACqC;AACtCL,UAAAA,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyBX,QAAzB;;AACA,UAAA,KAAI,CAACV,OAAL,CAAaiB,GAAb,CAAiB;AAAA,mBAAMR,MAAM,CAACS,IAAP,CAAY;AAAEC,cAAAA,MAAM,EAAEP,KAAK,CAACO,MAAhB;AAAwBC,cAAAA,YAAY,EAAE;AAAtC,aAAZ,CAAN;AAAA,WAAjB;AACH;AACJ,OAdD;;AAeA,WAAKpB,OAAL,CAAasB,iBAAb,CAA+B,YAAM;AACjCjB,QAAAA,OAAO,CAACkB,gBAAR,CAAyB,gBAAzB,EAA2CZ,QAA3C,EAAqDf,eAArD;AACAS,QAAAA,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsB,mCAAtB;AACH,OAHD;;AAIA,WAAKf,kBAAL,CAAwBuB,GAAxB,CAA4BnB,OAA5B,EAAqC;AACjCG,QAAAA,OAAO,EAAEC,MADwB;AAEjCgB,QAAAA,QAAQ,EAAE,oBAAM;AACZpB,UAAAA,OAAO,CAACqB,mBAAR,CAA4B,gBAA5B,EAA8Cf,QAA9C,EAAwDf,eAAxD;AACH;AAJgC,OAArC;;AAMA,aAAOa,MAAP;AACH;;;WACD,wBAAeN,YAAf,EAA6B;AACzB,UAAME,OAAO,GAAGpB,aAAa,CAACkB,YAAD,CAA7B;;AACA,UAAMG,IAAI,GAAG,KAAKL,kBAAL,CAAwBM,GAAxB,CAA4BF,OAA5B,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACNA,QAAAA,IAAI,CAACmB,QAAL;AACAnB,QAAAA,IAAI,CAACE,OAAL,CAAamB,QAAb;AACAtB,QAAAA,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB,mCAAzB;AACAhB,QAAAA,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB,2BAAzB;;AACA,aAAKpB,kBAAL,CAAwB2B,MAAxB,CAA+BvB,OAA/B;AACH;AACJ;;;WACD,uBAAc;AAAA;;AACV,WAAKJ,kBAAL,CAAwB4B,OAAxB,CAAgC,UAACC,KAAD,EAAQzB,OAAR;AAAA,eAAoB,MAAI,CAAC0B,cAAL,CAAoB1B,OAApB,CAApB;AAAA,OAAhC;AACH;;;;;;AAELP,eAAe,CAACkC,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIpC,eAAV,EAA2BJ,MAAM,CAACyC,QAAP,CAAgBxC,MAAM,CAACxB,QAAvB,CAA3B,EAA6DuB,MAAM,CAACyC,QAAP,CAAgBzC,MAAM,CAACnB,MAAvB,CAA7D,CAAP;AAAsG,CAAnK;;AACAuB,eAAe,CAACsC,KAAhB,GAAwB/D,EAAE,CAACgE,kBAAH,CAAsB;AAAEC,EAAAA,OAAO,EAAE,SAASL,uBAAT,GAAmC;AAAE,WAAO,IAAInC,eAAJ,CAAoBzB,EAAE,CAAC8D,QAAH,CAAYlE,EAAE,CAACE,QAAf,CAApB,EAA8CE,EAAE,CAAC8D,QAAH,CAAY9D,EAAE,CAACE,MAAf,CAA9C,CAAP;AAA+E,GAA/H;AAAiIgE,EAAAA,KAAK,EAAEzC,eAAxI;AAAyJ0C,EAAAA,UAAU,EAAE;AAArK,CAAtB,CAAxB;;AACA1C,eAAe,CAAC2C,cAAhB,GAAiC;AAAA,SAAM,CACnC;AAAEC,IAAAA,IAAI,EAAEvE;AAAR,GADmC,EAEnC;AAAEuE,IAAAA,IAAI,EAAEnE;AAAR,GAFmC,CAAN;AAAA,CAAjC;;AAIA,CAAC,YAAY;AAAE,GAAC,OAAOoE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjD,MAAM,CAACkD,iBAAP,CAAyB9C,eAAzB,EAA0C,CAAC;AACrG4C,IAAAA,IAAI,EAAEpE,UAD+F;AAErGuE,IAAAA,IAAI,EAAE,CAAC;AAAEL,MAAAA,UAAU,EAAE;AAAd,KAAD;AAF+F,GAAD,CAA1C,EAG1D,YAAY;AAAE,WAAO,CAAC;AAAEE,MAAAA,IAAI,EAAE/C,MAAM,CAACxB;AAAf,KAAD,EAA4B;AAAEuE,MAAAA,IAAI,EAAEhD,MAAM,CAACnB;AAAf,KAA5B,CAAP;AAA8D,GAHlB,EAGoB,IAHpB,CAAnD;AAG+E,CAH9F;AAIA;;;IACMuE,W;AACF,uBAAYC,WAAZ,EAAyBC,gBAAzB,EAA2C;AAAA;;AACvC,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACA;;AACA,SAAKC,WAAL,GAAmB,IAAIzE,YAAJ,EAAnB;AACH;;;;WACD,oBAAW;AAAA;;AACP,WAAKwE,gBAAL,CACKE,OADL,CACa,KAAKH,WADlB,EAEKI,SAFL,CAEe,UAAAvC,KAAK;AAAA,eAAI,MAAI,CAACqC,WAAL,CAAiBG,IAAjB,CAAsBxC,KAAtB,CAAJ;AAAA,OAFpB;AAGH;;;WACD,uBAAc;AACV,WAAKoC,gBAAL,CAAsBjB,cAAtB,CAAqC,KAAKgB,WAA1C;AACH;;;;;;AAELD,WAAW,CAACd,IAAZ,GAAmB,SAASqB,mBAAT,CAA6BnB,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIY,WAAV,EAAuBpD,MAAM,CAAC4D,iBAAP,CAAyB5D,MAAM,CAAChB,UAAhC,CAAvB,EAAoEgB,MAAM,CAAC4D,iBAAP,CAAyBxD,eAAzB,CAApE,CAAP;AAAwH,CAA7K;;AACAgD,WAAW,CAACS,IAAZ,GAAmB,aAAc7D,MAAM,CAAC8D,iBAAP,CAAyB;AAAEd,EAAAA,IAAI,EAAEI,WAAR;AAAqBW,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,aAAL,EAAoB,EAApB,CAAD,CAAhC;AAA2DC,EAAAA,OAAO,EAAE;AAAET,IAAAA,WAAW,EAAE;AAAf;AAApE,CAAzB,CAAjC;;AACAH,WAAW,CAACL,cAAZ,GAA6B;AAAA,SAAM,CAC/B;AAAEC,IAAAA,IAAI,EAAEhE;AAAR,GAD+B,EAE/B;AAAEgE,IAAAA,IAAI,EAAE5C;AAAR,GAF+B,CAAN;AAAA,CAA7B;;AAIAgD,WAAW,CAACa,cAAZ,GAA6B;AACzBV,EAAAA,WAAW,EAAE,CAAC;AAAEP,IAAAA,IAAI,EAAE/D;AAAR,GAAD;AADY,CAA7B;;AAGA,CAAC,YAAY;AAAE,GAAC,OAAOgE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjD,MAAM,CAACkD,iBAAP,CAAyBE,WAAzB,EAAsC,CAAC;AACjGJ,IAAAA,IAAI,EAAEjE,SAD2F;AAEjGoE,IAAAA,IAAI,EAAE,CAAC;AACCe,MAAAA,QAAQ,EAAE;AADX,KAAD;AAF2F,GAAD,CAAtC,EAK1D,YAAY;AAAE,WAAO,CAAC;AAAElB,MAAAA,IAAI,EAAEhD,MAAM,CAAChB;AAAf,KAAD,EAA8B;AAAEgE,MAAAA,IAAI,EAAE5C;AAAR,KAA9B,CAAP;AAAkE,GALtB,EAKwB;AAAEmD,IAAAA,WAAW,EAAE,CAAC;AAC9FP,MAAAA,IAAI,EAAE/D;AADwF,KAAD;AAAf,GALxB,CAAnD;AAOC,CAPhB;AASA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;IACMkF,mB;AACF,+BAAYd,WAAZ,EAAyBhD,SAAzB,EAAoCC,OAApC;AACA;AACA8D,EAAAA,QAFA,EAEU;AAAA;;AAAA;;AACN,SAAKf,WAAL,GAAmBA,WAAnB;AACA,SAAKhD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAK+D,UAAL,GAAkB,IAAI1E,OAAJ,EAAlB;AACA,SAAK2E,QAAL,GAAgB,IAAhB;AACA;AACR;AACA;AACA;AACA;;AACQ,SAAKC,gBAAL,GAAwB,CAAC,CAAzB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA;;AACA,SAAKC,iBAAL,GAAyB,UAACvD,KAAD,EAAW;AAChC,MAAA,MAAI,CAACwD,SAAL,GAAiBxD,KAAK,CAAC8B,IAAN,KAAe,OAAhC;AACH,KAFD;;AAGA,SAAK2B,SAAL,GAAiBP,QAAjB;AACA,SAAKQ,gBAAL,GAAwB,KAAKvB,WAAL,CAAiBwB,aAAzC;AACH;AACD;;;;;SACA,eAAc;AAAE,aAAO,KAAKC,QAAZ;AAAuB,K;SACvC,aAAYC,KAAZ,EAAmB;AACf,WAAKD,QAAL,GAAgBtF,oBAAoB,CAACuF,KAAD,CAApC;;AACA,WAAKC,aAAL;AACH;AACD;;;;SACA,eAAc;AAAE,aAAO,KAAKC,QAAZ;AAAuB,K;SACvC,aAAYF,KAAZ,EAAmB;AACf,WAAKE,QAAL,GAAgBzF,oBAAoB,CAACuF,KAAD,CAApC;;AACA,WAAKG,aAAL;AACH;AACD;;;;SACA,eAAc;AAAE,aAAO,KAAKZ,QAAZ;AAAuB,K;SACvC,aAAYS,KAAZ,EAAmB;AACfA,MAAAA,KAAK,GAAGtF,qBAAqB,CAACsF,KAAD,CAA7B,CADe,CAEf;AACA;;AACA,UAAI,KAAKT,QAAL,KAAkBS,KAAtB,EAA6B;AACzB,SAAC,KAAKT,QAAL,GAAgBS,KAAjB,IAA0B,KAAKI,kBAAL,CAAwB,IAAxB,CAA1B,GAA0D,KAAKC,KAAL,EAA1D;AACH;AACJ;;;SACD,eAAkB;AAAE,aAAO,KAAKR,gBAAL,CAAsBS,WAA7B;AAA2C,K;SAC/D,aAAgBN,KAAhB,EAAuB;AACnB,WAAKO,wBAAL,GAAgCC,SAAhC;AACA,WAAKX,gBAAL,CAAsBS,WAAtB,GAAoCN,KAApC;;AACA,WAAKS,+BAAL;AACH;AACD;;;;WACA,yBAAgB;AACZ,UAAMC,SAAS,GAAG,KAAKC,OAAL,IAAgB,KAAKC,iBAArB,aACX,KAAKD,OAAL,GAAe,KAAKC,iBADT,UACiC,IADnD;;AAEA,UAAIF,SAAJ,EAAe;AACX,aAAKb,gBAAL,CAAsBgB,KAAtB,CAA4BH,SAA5B,GAAwCA,SAAxC;AACH;AACJ;AACD;;;;WACA,yBAAgB;AACZ,UAAMI,SAAS,GAAG,KAAKC,OAAL,IAAgB,KAAKH,iBAArB,aACX,KAAKG,OAAL,GAAe,KAAKH,iBADT,UACiC,IADnD;;AAEA,UAAIE,SAAJ,EAAe;AACX,aAAKjB,gBAAL,CAAsBgB,KAAtB,CAA4BC,SAA5B,GAAwCA,SAAxC;AACH;AACJ;;;WACD,2BAAkB;AAAA;;AACd,UAAI,KAAKxF,SAAL,CAAeK,SAAnB,EAA8B;AAC1B;AACA,aAAKqF,cAAL,GAAsB,KAAKnB,gBAAL,CAAsBgB,KAAtB,CAA4BI,MAAlD;AACA,aAAKb,kBAAL;;AACA,aAAK7E,OAAL,CAAasB,iBAAb,CAA+B,YAAM;AACjC,cAAMqE,MAAM,GAAG,MAAI,CAACC,UAAL,EAAf;;AACAtG,UAAAA,SAAS,CAACqG,MAAD,EAAS,QAAT,CAAT,CACKE,IADL,CACUtG,SAAS,CAAC,EAAD,CADnB,EACyBC,SAAS,CAAC,MAAI,CAACuE,UAAN,CADlC,EAEKZ,SAFL,CAEe;AAAA,mBAAM,MAAI,CAAC0B,kBAAL,CAAwB,IAAxB,CAAN;AAAA,WAFf;;AAGA,UAAA,MAAI,CAACP,gBAAL,CAAsB/C,gBAAtB,CAAuC,OAAvC,EAAgD,MAAI,CAAC4C,iBAArD;;AACA,UAAA,MAAI,CAACG,gBAAL,CAAsB/C,gBAAtB,CAAuC,MAAvC,EAA+C,MAAI,CAAC4C,iBAApD;AACH,SAPD;;AAQA,aAAKD,aAAL,GAAqB,IAArB;AACA,aAAKW,kBAAL,CAAwB,IAAxB;AACH;AACJ;;;WACD,uBAAc;AACV,WAAKP,gBAAL,CAAsB5C,mBAAtB,CAA0C,OAA1C,EAAmD,KAAKyC,iBAAxD;;AACA,WAAKG,gBAAL,CAAsB5C,mBAAtB,CAA0C,MAA1C,EAAkD,KAAKyC,iBAAvD;;AACA,WAAKJ,UAAL,CAAgB7C,IAAhB;;AACA,WAAK6C,UAAL,CAAgBpC,QAAhB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,oCAA2B;AACvB,UAAI,KAAK0D,iBAAT,EAA4B;AACxB;AACH,OAHsB,CAIvB;;;AACA,UAAIS,aAAa,GAAG,KAAKxB,gBAAL,CAAsByB,SAAtB,CAAgC,KAAhC,CAApB;;AACAD,MAAAA,aAAa,CAACE,IAAd,GAAqB,CAArB,CANuB,CAOvB;AACA;AACA;;AACAF,MAAAA,aAAa,CAACR,KAAd,CAAoBW,QAApB,GAA+B,UAA/B;AACAH,MAAAA,aAAa,CAACR,KAAd,CAAoBY,UAApB,GAAiC,QAAjC;AACAJ,MAAAA,aAAa,CAACR,KAAd,CAAoBa,MAApB,GAA6B,MAA7B;AACAL,MAAAA,aAAa,CAACR,KAAd,CAAoBc,OAApB,GAA8B,GAA9B;AACAN,MAAAA,aAAa,CAACR,KAAd,CAAoBI,MAApB,GAA6B,EAA7B;AACAI,MAAAA,aAAa,CAACR,KAAd,CAAoBH,SAApB,GAAgC,EAAhC;AACAW,MAAAA,aAAa,CAACR,KAAd,CAAoBC,SAApB,GAAgC,EAAhC,CAhBuB,CAiBvB;AACA;AACA;AACA;AACA;;AACAO,MAAAA,aAAa,CAACR,KAAd,CAAoBe,QAApB,GAA+B,QAA/B;;AACA,WAAK/B,gBAAL,CAAsBgC,UAAtB,CAAiCC,WAAjC,CAA6CT,aAA7C;;AACA,WAAKT,iBAAL,GAAyBS,aAAa,CAACU,YAAvC;;AACA,WAAKlC,gBAAL,CAAsBgC,UAAtB,CAAiCG,WAAjC,CAA6CX,aAA7C,EAzBuB,CA0BvB;;;AACA,WAAKpB,aAAL;;AACA,WAAKE,aAAL;AACH;;;WACD,gCAAuB;AACnB,UAAMvE,OAAO,GAAG,KAAKiE,gBAArB;AACA,UAAMoC,cAAc,GAAGrG,OAAO,CAACiF,KAAR,CAAcqB,YAAd,IAA8B,EAArD;AACA,UAAMC,SAAS,GAAG,KAAK7G,SAAL,CAAe8G,OAAjC;AACA,UAAMC,iBAAiB,GAAGF,SAAS,IAAI,KAAKxC,SAA5C;AACA,UAAM2C,cAAc,GAAGH,SAAS,GAC5B,yCAD4B,GAE5B,iCAFJ,CALmB,CAQnB;AACA;AACA;;AACA,UAAIE,iBAAJ,EAAuB;AACnBzG,QAAAA,OAAO,CAACiF,KAAR,CAAcqB,YAAd,aAAgCtG,OAAO,CAACmG,YAAxC;AACH,OAbkB,CAcnB;AACA;;;AACAnG,MAAAA,OAAO,CAACS,SAAR,CAAkBE,GAAlB,CAAsB+F,cAAtB,EAhBmB,CAiBnB;AACA;;AACA,UAAMC,YAAY,GAAG3G,OAAO,CAAC2G,YAAR,GAAuB,CAA5C;AACA3G,MAAAA,OAAO,CAACS,SAAR,CAAkBO,MAAlB,CAAyB0F,cAAzB;;AACA,UAAID,iBAAJ,EAAuB;AACnBzG,QAAAA,OAAO,CAACiF,KAAR,CAAcqB,YAAd,GAA6BD,cAA7B;AACH;;AACD,aAAOM,YAAP;AACH;;;WACD,2CAAkC;AAC9B,UAAI,CAAC,KAAK9C,aAAN,IAAuB,KAAKc,wBAAL,IAAiCC,SAA5D,EAAuE;AACnE;AACH;;AACD,UAAI,CAAC,KAAKF,WAAV,EAAuB;AACnB,aAAKC,wBAAL,GAAgC,CAAhC;AACA;AACH;;AACD,UAAMP,KAAK,GAAG,KAAKH,gBAAL,CAAsBG,KAApC;AACA,WAAKH,gBAAL,CAAsBG,KAAtB,GAA8B,KAAKH,gBAAL,CAAsBS,WAApD;AACA,WAAKC,wBAAL,GAAgC,KAAKiC,oBAAL,EAAhC;AACA,WAAK3C,gBAAL,CAAsBG,KAAtB,GAA8BA,KAA9B;AACH;;;WACD,qBAAY;AACR,UAAI,KAAK1E,SAAL,CAAeK,SAAnB,EAA8B;AAC1B,aAAKyE,kBAAL;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,8BAAkC;AAAA;;AAAA,UAAfqC,KAAe,uEAAP,KAAO;;AAC9B;AACA,UAAI,CAAC,KAAKlD,QAAV,EAAoB;AAChB;AACH;;AACD,WAAKmD,wBAAL;;AACA,WAAKjC,+BAAL,GAN8B,CAO9B;AACA;;;AACA,UAAI,CAAC,KAAKG,iBAAV,EAA6B;AACzB;AACH;;AACD,UAAM+B,QAAQ,GAAG,KAAKrE,WAAL,CAAiBwB,aAAlC;AACA,UAAME,KAAK,GAAG2C,QAAQ,CAAC3C,KAAvB,CAb8B,CAc9B;;AACA,UAAI,CAACyC,KAAD,IAAU,KAAK1C,QAAL,KAAkB,KAAKP,gBAAjC,IAAqDQ,KAAK,KAAK,KAAK4C,cAAxE,EAAwF;AACpF;AACH;;AACD,UAAML,YAAY,GAAG,KAAKC,oBAAL,EAArB;;AACA,UAAMvB,MAAM,GAAG4B,IAAI,CAACC,GAAL,CAASP,YAAT,EAAuB,KAAKhC,wBAAL,IAAiC,CAAxD,CAAf,CAnB8B,CAoB9B;;AACAoC,MAAAA,QAAQ,CAAC9B,KAAT,CAAeI,MAAf,aAA2BA,MAA3B;;AACA,WAAK1F,OAAL,CAAasB,iBAAb,CAA+B,YAAM;AACjC,YAAI,OAAOkG,qBAAP,KAAiC,WAArC,EAAkD;AAC9CA,UAAAA,qBAAqB,CAAC;AAAA,mBAAM,MAAI,CAACC,sBAAL,CAA4BL,QAA5B,CAAN;AAAA,WAAD,CAArB;AACH,SAFD,MAGK;AACDM,UAAAA,UAAU,CAAC;AAAA,mBAAM,MAAI,CAACD,sBAAL,CAA4BL,QAA5B,CAAN;AAAA,WAAD,CAAV;AACH;AACJ,OAPD;;AAQA,WAAKC,cAAL,GAAsB5C,KAAtB;AACA,WAAKR,gBAAL,GAAwB,KAAKO,QAA7B;AACH;AACD;AACJ;AACA;;;;WACI,iBAAQ;AACJ;AACA;AACA,UAAI,KAAKiB,cAAL,KAAwBR,SAA5B,EAAuC;AACnC,aAAKX,gBAAL,CAAsBgB,KAAtB,CAA4BI,MAA5B,GAAqC,KAAKD,cAA1C;AACH;AACJ,K,CACD;AACA;AACA;AACA;;;;WACA,6BAAoB,CAChB;AACH;AACD;;;;WACA,wBAAe;AACX,aAAO,KAAKpB,SAAL,IAAkBP,QAAzB;AACH;AACD;;;;WACA,sBAAa;AACT,UAAM6D,GAAG,GAAG,KAAKC,YAAL,EAAZ;;AACA,aAAOD,GAAG,CAACE,WAAJ,IAAmBlC,MAA1B;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,gCAAuByB,QAAvB,EAAiC;AAC7B,UAAQU,cAAR,GAAyCV,QAAzC,CAAQU,cAAR;AAAA,UAAwBC,YAAxB,GAAyCX,QAAzC,CAAwBW,YAAxB,CAD6B,CAE7B;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI,CAAC,KAAKhE,UAAL,CAAgBiE,SAAjB,IAA8B,KAAK5D,SAAvC,EAAkD;AAC9CgD,QAAAA,QAAQ,CAACa,iBAAT,CAA2BH,cAA3B,EAA2CC,YAA3C;AACH;AACJ;;;;;;AAELlE,mBAAmB,CAAC7B,IAApB,GAA2B,SAASkG,2BAAT,CAAqChG,CAArC,EAAwC;AAAE,SAAO,KAAKA,CAAC,IAAI2B,mBAAV,EAA+BnE,MAAM,CAAC4D,iBAAP,CAAyB5D,MAAM,CAAChB,UAAhC,CAA/B,EAA4EgB,MAAM,CAAC4D,iBAAP,CAAyB3D,MAAM,CAACxB,QAAhC,CAA5E,EAAuHuB,MAAM,CAAC4D,iBAAP,CAAyB5D,MAAM,CAACnB,MAAhC,CAAvH,EAAgKmB,MAAM,CAAC4D,iBAAP,CAAyB7D,QAAzB,EAAmC,CAAnC,CAAhK,CAAP;AAAgN,CAArR;;AACAoE,mBAAmB,CAACN,IAApB,GAA2B,aAAc7D,MAAM,CAAC8D,iBAAP,CAAyB;AAAEd,EAAAA,IAAI,EAAEmB,mBAAR;AAA6BJ,EAAAA,SAAS,EAAE,CAAC,CAAC,UAAD,EAAa,qBAAb,EAAoC,EAApC,CAAD,CAAxC;AAAmF0E,EAAAA,SAAS,EAAE,CAAC,MAAD,EAAS,GAAT,EAAc,CAAd,EAAiB,uBAAjB,CAA9F;AAAyIC,EAAAA,YAAY,EAAE,SAASC,gCAAT,CAA0CC,EAA1C,EAA8CC,GAA9C,EAAmD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AAClR5I,MAAAA,MAAM,CAAC8I,UAAP,CAAkB,OAAlB,EAA2B,SAASC,4CAAT,GAAwD;AAAE,eAAOF,GAAG,CAACG,iBAAJ,EAAP;AAAiC,OAAtH;AACH;AAAE,GAF2D;AAEzDC,EAAAA,MAAM,EAAE;AAAEvD,IAAAA,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAX;AAA8CI,IAAAA,OAAO,EAAE,CAAC,oBAAD,EAAuB,SAAvB,CAAvD;AAA0FoD,IAAAA,OAAO,EAAE,CAAC,qBAAD,EAAwB,SAAxB,CAAnG;AAAuI7D,IAAAA,WAAW,EAAE;AAApJ,GAFiD;AAEoH8D,EAAAA,QAAQ,EAAE,CAAC,qBAAD;AAF9H,CAAzB,CAAzC;;AAGAhF,mBAAmB,CAACpB,cAApB,GAAqC;AAAA,SAAM,CACvC;AAAEC,IAAAA,IAAI,EAAEhE;AAAR,GADuC,EAEvC;AAAEgE,IAAAA,IAAI,EAAEvE;AAAR,GAFuC,EAGvC;AAAEuE,IAAAA,IAAI,EAAEnE;AAAR,GAHuC,EAIvC;AAAEmE,IAAAA,IAAI,EAAEuC,SAAR;AAAmB6D,IAAAA,UAAU,EAAE,CAAC;AAAEpG,MAAAA,IAAI,EAAE9D;AAAR,KAAD,EAAqB;AAAE8D,MAAAA,IAAI,EAAE7D,MAAR;AAAgBgE,MAAAA,IAAI,EAAE,CAACpD,QAAD;AAAtB,KAArB;AAA/B,GAJuC,CAAN;AAAA,CAArC;;AAMAoE,mBAAmB,CAACF,cAApB,GAAqC;AACjCyB,EAAAA,OAAO,EAAE,CAAC;AAAE1C,IAAAA,IAAI,EAAE5D,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,oBAAD;AAArB,GAAD,CADwB;AAEjC2C,EAAAA,OAAO,EAAE,CAAC;AAAE9C,IAAAA,IAAI,EAAE5D,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,oBAAD;AAArB,GAAD,CAFwB;AAGjC+F,EAAAA,OAAO,EAAE,CAAC;AAAElG,IAAAA,IAAI,EAAE5D,KAAR;AAAe+D,IAAAA,IAAI,EAAE,CAAC,qBAAD;AAArB,GAAD,CAHwB;AAIjCkC,EAAAA,WAAW,EAAE,CAAC;AAAErC,IAAAA,IAAI,EAAE5D;AAAR,GAAD,CAJoB;AAKjC4J,EAAAA,iBAAiB,EAAE,CAAC;AAAEhG,IAAAA,IAAI,EAAE3D,YAAR;AAAsB8D,IAAAA,IAAI,EAAE,CAAC,OAAD;AAA5B,GAAD;AALc,CAArC;;AAOA,CAAC,YAAY;AAAE,GAAC,OAAOF,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjD,MAAM,CAACkD,iBAAP,CAAyBiB,mBAAzB,EAA8C,CAAC;AACzGnB,IAAAA,IAAI,EAAEjE,SADmG;AAEzGoE,IAAAA,IAAI,EAAE,CAAC;AACCe,MAAAA,QAAQ,EAAE,+BADX;AAECiF,MAAAA,QAAQ,EAAE,qBAFX;AAGCE,MAAAA,IAAI,EAAE;AACF,iBAAS,uBADP;AAEF;AACA;AACA,gBAAQ;AAJN;AAHP,KAAD;AAFmG,GAAD,CAA9C,EAY1D,YAAY;AAAE,WAAO,CAAC;AAAErG,MAAAA,IAAI,EAAEhD,MAAM,CAAChB;AAAf,KAAD,EAA8B;AAAEgE,MAAAA,IAAI,EAAE/C,MAAM,CAACxB;AAAf,KAA9B,EAAyD;AAAEuE,MAAAA,IAAI,EAAEhD,MAAM,CAACnB;AAAf,KAAzD,EAAkF;AAAEmE,MAAAA,IAAI,EAAEuC,SAAR;AAAmB6D,MAAAA,UAAU,EAAE,CAAC;AAC/HpG,QAAAA,IAAI,EAAE9D;AADyH,OAAD,EAE/H;AACC8D,QAAAA,IAAI,EAAE7D,MADP;AAECgE,QAAAA,IAAI,EAAE,CAACpD,QAAD;AAFP,OAF+H;AAA/B,KAAlF,CAAP;AAKF,GAjB8C,EAiB5C;AAAE2F,IAAAA,OAAO,EAAE,CAAC;AACtB1C,MAAAA,IAAI,EAAE5D,KADgB;AAEtB+D,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFgB,KAAD,CAAX;AAGV2C,IAAAA,OAAO,EAAE,CAAC;AACV9C,MAAAA,IAAI,EAAE5D,KADI;AAEV+D,MAAAA,IAAI,EAAE,CAAC,oBAAD;AAFI,KAAD,CAHC;AAMV+F,IAAAA,OAAO,EAAE,CAAC;AACVlG,MAAAA,IAAI,EAAE5D,KADI;AAEV+D,MAAAA,IAAI,EAAE,CAAC,qBAAD;AAFI,KAAD,CANC;AASVkC,IAAAA,WAAW,EAAE,CAAC;AACdrC,MAAAA,IAAI,EAAE5D;AADQ,KAAD,CATH;AAYlB;AACA;AACA;AACA;AACA4J,IAAAA,iBAAiB,EAAE,CAAC;AACZhG,MAAAA,IAAI,EAAE3D,YADM;AAEZ8D,MAAAA,IAAI,EAAE,CAAC,OAAD;AAFM,KAAD;AAhBD,GAjB4C,CAAnD;AAoCC,CApChB;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMmG,e;;;;AAENA,eAAe,CAAChH,IAAhB,GAAuB,SAASiH,uBAAT,CAAiC/G,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAI8G,eAAV,GAAP;AAAsC,CAAnG;;AACAA,eAAe,CAACE,IAAhB,GAAuB,aAAcxJ,MAAM,CAACyJ,gBAAP,CAAwB;AAAEzG,EAAAA,IAAI,EAAEsG;AAAR,CAAxB,CAArC;AACAA,eAAe,CAACI,IAAhB,GAAuB,aAAc1J,MAAM,CAAC2J,gBAAP,CAAwB;AAAEC,EAAAA,OAAO,EAAE,CAAC,CAAClL,cAAD,CAAD;AAAX,CAAxB,CAArC;;AACA,CAAC,YAAY;AAAE,GAAC,OAAOuE,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmDjD,MAAM,CAACkD,iBAAP,CAAyBoG,eAAzB,EAA0C,CAAC;AACrGtG,IAAAA,IAAI,EAAE1D,QAD+F;AAErG6D,IAAAA,IAAI,EAAE,CAAC;AACC0G,MAAAA,YAAY,EAAE,CAACzG,WAAD,EAAce,mBAAd,CADf;AAECyF,MAAAA,OAAO,EAAE,CAAClL,cAAD,CAFV;AAGCoL,MAAAA,OAAO,EAAE,CAAC1G,WAAD,EAAce,mBAAd;AAHV,KAAD;AAF+F,GAAD,CAA1C,EAO1D,IAP0D,EAOpD,IAPoD,CAAnD;AAOO,CAPtB;;AAQA,CAAC,YAAY;AAAE,GAAC,OAAO4F,SAAP,KAAqB,WAArB,IAAoCA,SAArC,KAAmD/J,MAAM,CAACgK,kBAAP,CAA0BV,eAA1B,EAA2C;AAAEO,IAAAA,YAAY,EAAE,wBAAY;AAAE,aAAO,CAACzG,WAAD,EAAce,mBAAd,CAAP;AAA4C,KAA1E;AAA4EyF,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAClL,cAAD,CAAP;AAA0B,KAA7H;AAA+HoL,IAAAA,OAAO,EAAE,mBAAY;AAAE,aAAO,CAAC1G,WAAD,EAAce,mBAAd,CAAP;AAA4C;AAAlM,GAA3C,CAAnD;AAAsS,CAArT;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAEA,SAAS/D,eAAT,EAA0BgD,WAA1B,EAAuCe,mBAAvC,EAA4DmF,eAA5D,G,CAEA","sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgZone, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = i0.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(i0.ɵɵinject(i1.Platform), i0.ɵɵinject(i0.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() { return this._textareaElement.placeholder; }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        this._textareaElement.placeholder = value;\n        this._cacheTextareaPlaceholderHeight();\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"], placeholder: \"placeholder\" }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    placeholder: [{ type: Input }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], placeholder: [{\n            type: Input\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵfac = function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); };\nTextFieldModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map"]},"metadata":{},"sourceType":"module"}