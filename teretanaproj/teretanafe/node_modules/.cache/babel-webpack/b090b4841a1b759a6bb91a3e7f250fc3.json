{"ast":null,"code":"import _inherits from \"/home/user/Documents/local/lekariproj/lekarife/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/user/Documents/local/lekariproj/lekarife/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/home/user/Documents/local/lekariproj/lekarife/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/home/user/Documents/local/lekariproj/lekarife/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/home/user/Documents/local/lekariproj/lekarife/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nvar _c0 = [\"button\"];\nvar _c1 = [\"*\"];\nvar MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\n\nvar MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\n\nvar MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return MatButtonToggleGroup;\n  }),\n  multi: true\n}; // Counter used to generate unique IDs.\n\nvar uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\n\nvar MatButtonToggleChange = function MatButtonToggleChange(\n/** The MatButtonToggle that emits the event. */\nsource,\n/** The value assigned to the MatButtonToggle. */\nvalue) {\n  _classCallCheck(this, MatButtonToggleChange);\n\n  this.source = source;\n  this.value = value;\n};\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n\n\nvar MatButtonToggleGroup = /*#__PURE__*/function () {\n  function MatButtonToggleGroup(_changeDetector, defaultOptions) {\n    _classCallCheck(this, MatButtonToggleGroup);\n\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n\n    this._controlValueAccessorChangeFn = function () {};\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n\n\n    this._onTouched = function () {};\n\n    this._name = \"mat-button-toggle-group-\".concat(uniqueIdCounter++);\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n    /** Event emitted when the group's value changes. */\n\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  /** `name` attribute for the underlying `input` element. */\n\n\n  _createClass(MatButtonToggleGroup, [{\n    key: \"name\",\n    get: function get() {\n      return this._name;\n    },\n    set: function set(value) {\n      var _this = this;\n\n      this._name = value;\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          toggle.name = _this._name;\n\n          toggle._markForCheck();\n        });\n      }\n    }\n    /** Whether the toggle group is vertical. */\n\n  }, {\n    key: \"vertical\",\n    get: function get() {\n      return this._vertical;\n    },\n    set: function set(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      var selected = this._selectionModel ? this._selectionModel.selected : [];\n\n      if (this.multiple) {\n        return selected.map(function (toggle) {\n          return toggle.value;\n        });\n      }\n\n      return selected[0] ? selected[0].value : undefined;\n    },\n    set: function set(newValue) {\n      this._setSelectionByValue(newValue);\n\n      this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n\n  }, {\n    key: \"selected\",\n    get: function get() {\n      var selected = this._selectionModel ? this._selectionModel.selected : [];\n      return this.multiple ? selected : selected[0] || null;\n    }\n    /** Whether multiple button toggles can be selected. */\n\n  }, {\n    key: \"multiple\",\n    get: function get() {\n      return this._multiple;\n    },\n    set: function set(value) {\n      this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n\n      if (this._buttonToggles) {\n        this._buttonToggles.forEach(function (toggle) {\n          return toggle._markForCheck();\n        });\n      }\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      var _this$_selectionModel;\n\n      (_this$_selectionModel = this._selectionModel).select.apply(_this$_selectionModel, _toConsumableArray(this._buttonToggles.filter(function (toggle) {\n        return toggle.checked;\n      })));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      this.value = value;\n\n      this._changeDetector.markForCheck();\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this._controlValueAccessorChangeFn = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this._onTouched = fn;\n    } // Implemented as part of ControlValueAccessor.\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n\n  }, {\n    key: \"_emitChangeEvent\",\n    value: function _emitChangeEvent() {\n      var selected = this.selected;\n      var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      var event = new MatButtonToggleChange(source, this.value);\n\n      this._controlValueAccessorChangeFn(event.value);\n\n      this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n\n  }, {\n    key: \"_syncButtonToggle\",\n    value: function _syncButtonToggle(toggle, select) {\n      var _this2 = this;\n\n      var isUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var deferEvents = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      // Deselect the currently-selected toggle, if we're in single-selection\n      // mode and the button being toggled isn't selected at the moment.\n      if (!this.multiple && this.selected && !toggle.checked) {\n        this.selected.checked = false;\n      }\n\n      if (this._selectionModel) {\n        if (select) {\n          this._selectionModel.select(toggle);\n        } else {\n          this._selectionModel.deselect(toggle);\n        }\n      } else {\n        deferEvents = true;\n      } // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n      // the side-effect is that we may end up updating the model value out of sequence in others\n      // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n\n\n      if (deferEvents) {\n        Promise.resolve().then(function () {\n          return _this2._updateModelValue(isUserInput);\n        });\n      } else {\n        this._updateModelValue(isUserInput);\n      }\n    }\n    /** Checks whether a button toggle is selected. */\n\n  }, {\n    key: \"_isSelected\",\n    value: function _isSelected(toggle) {\n      return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n\n  }, {\n    key: \"_isPrechecked\",\n    value: function _isPrechecked(toggle) {\n      if (typeof this._rawValue === 'undefined') {\n        return false;\n      }\n\n      if (this.multiple && Array.isArray(this._rawValue)) {\n        return this._rawValue.some(function (value) {\n          return toggle.value != null && value === toggle.value;\n        });\n      }\n\n      return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n\n  }, {\n    key: \"_setSelectionByValue\",\n    value: function _setSelectionByValue(value) {\n      var _this3 = this;\n\n      this._rawValue = value;\n\n      if (!this._buttonToggles) {\n        return;\n      }\n\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw Error('Value must be an array in multiple-selection mode.');\n        }\n\n        this._clearSelection();\n\n        value.forEach(function (currentValue) {\n          return _this3._selectValue(currentValue);\n        });\n      } else {\n        this._clearSelection();\n\n        this._selectValue(value);\n      }\n    }\n    /** Clears the selected toggles. */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      this._selectionModel.clear();\n\n      this._buttonToggles.forEach(function (toggle) {\n        return toggle.checked = false;\n      });\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n\n  }, {\n    key: \"_selectValue\",\n    value: function _selectValue(value) {\n      var correspondingOption = this._buttonToggles.find(function (toggle) {\n        return toggle.value != null && toggle.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption.checked = true;\n\n        this._selectionModel.select(correspondingOption);\n      }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n\n  }, {\n    key: \"_updateModelValue\",\n    value: function _updateModelValue(isUserInput) {\n      // Only emit the change event for user input.\n      if (isUserInput) {\n        this._emitChangeEvent();\n      } // Note: we emit this one no matter whether it was a user interaction, because\n      // it is used by Angular to sync up the two-way data binding.\n\n\n      this.valueChange.emit(this.value);\n    }\n  }]);\n\n  return MatButtonToggleGroup;\n}();\n\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\n\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 5,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    appearance: \"appearance\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MAT_BUTTON_TOGGLE_GROUP,\n    useExisting: MatButtonToggleGroup\n  }])]\n});\n\nMatButtonToggleGroup.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatButtonToggleGroup.propDecorators = {\n  _buttonToggles: [{\n    type: ContentChildren,\n    args: [forwardRef(function () {\n      return MatButtonToggle;\n    }), {\n      // Note that this would technically pick up toggles\n      // from nested groups, but that's not a case that we support.\n      descendants: true\n    }]\n  }],\n  appearance: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  vertical: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  valueChange: [{\n    type: Output\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MAT_BUTTON_TOGGLE_GROUP,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    valueChange: [{\n      type: Output\n    }],\n    change: [{\n      type: Output\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(function () {\n        return MatButtonToggle;\n      }), {\n        // Note that this would technically pick up toggles\n        // from nested groups, but that's not a case that we support.\n        descendants: true\n      }]\n    }]\n  });\n})(); // Boilerplate for applying mixins to the MatButtonToggle class.\n\n/** @docs-private */\n\n\nvar _MatButtonToggleBase = mixinDisableRipple( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n\n  return _class;\n}());\n/** Single button inside of a toggle group. */\n\n\nvar MatButtonToggle = /*#__PURE__*/function (_MatButtonToggleBase2) {\n  _inherits(MatButtonToggle, _MatButtonToggleBase2);\n\n  var _super = _createSuper(MatButtonToggle);\n\n  function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n    var _this4;\n\n    _classCallCheck(this, MatButtonToggle);\n\n    _this4 = _super.call(this);\n    _this4._changeDetectorRef = _changeDetectorRef;\n    _this4._elementRef = _elementRef;\n    _this4._focusMonitor = _focusMonitor;\n    _this4._isSingleSelector = false;\n    _this4._checked = false;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n\n    _this4.ariaLabelledby = null;\n    _this4._disabled = false;\n    /** Event emitted when the group value changes. */\n\n    _this4.change = new EventEmitter();\n    var parsedTabIndex = Number(defaultTabIndex);\n    _this4.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    _this4.buttonToggleGroup = toggleGroup;\n    _this4.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    return _this4;\n  }\n  /** Unique ID for the underlying `button` element. */\n\n\n  _createClass(MatButtonToggle, [{\n    key: \"buttonId\",\n    get: function get() {\n      return \"\".concat(this.id, \"-button\");\n    }\n    /** The appearance style of the button. */\n\n  }, {\n    key: \"appearance\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    },\n    set: function set(value) {\n      this._appearance = value;\n    }\n    /** Whether the button is checked. */\n\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    },\n    set: function set(value) {\n      var newValue = coerceBooleanProperty(value);\n\n      if (newValue !== this._checked) {\n        this._checked = newValue;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n        }\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }\n    /** Whether the button is disabled. */\n\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var group = this.buttonToggleGroup;\n      this._isSingleSelector = group && !group.multiple;\n      this.id = this.id || \"mat-button-toggle-\".concat(uniqueIdCounter++);\n\n      if (this._isSingleSelector) {\n        this.name = group.name;\n      }\n\n      if (group) {\n        if (group._isPrechecked(this)) {\n          this.checked = true;\n        } else if (group._isSelected(this) !== this._checked) {\n          // As as side effect of the circular dependency between the toggle group and the button,\n          // we may end up in a state where the button is supposed to be checked on init, but it\n          // isn't, because the checked value was assigned too early. This can happen when Ivy\n          // assigns the static input value before the `ngOnInit` has run.\n          group._syncButtonToggle(this, this._checked);\n        }\n      }\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this._focusMonitor.monitor(this._elementRef, true);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var group = this.buttonToggleGroup;\n\n      this._focusMonitor.stopMonitoring(this._elementRef); // Remove the toggle from the selection once it's destroyed. Needs to happen\n      // on the next tick in order to avoid \"changed after checked\" errors.\n\n\n      if (group && group._isSelected(this)) {\n        group._syncButtonToggle(this, false, false, true);\n      }\n    }\n    /** Focuses the button. */\n\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n\n  }, {\n    key: \"_onButtonClick\",\n    value: function _onButtonClick() {\n      var newChecked = this._isSingleSelector ? true : !this._checked;\n\n      if (newChecked !== this._checked) {\n        this._checked = newChecked;\n\n        if (this.buttonToggleGroup) {\n          this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n\n          this.buttonToggleGroup._onTouched();\n        }\n      } // Emit a change event when it's the single selector\n\n\n      this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n\n  }, {\n    key: \"_markForCheck\",\n    value: function _markForCheck() {\n      // When the group value changes, the button will not be notified.\n      // Use `markForCheck` to explicit update button toggle's status.\n      this._changeDetectorRef.markForCheck();\n    }\n  }]);\n\n  return MatButtonToggle;\n}(_MatButtonToggleBase);\n\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\n\nMatButtonToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n        return ctx.focus();\n      });\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n      ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    tabIndex: \"tabIndex\",\n    appearance: \"appearance\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    id: \"id\",\n    name: \"name\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    value: \"value\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 9,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n      ɵngcc0.ɵɵprojection(3);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelement(4, \"span\", 3);\n      ɵngcc0.ɵɵelement(5, \"span\", 4);\n    }\n\n    if (rf & 2) {\n      var _r0 = ɵngcc0.ɵɵreference(1);\n\n      ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      ɵngcc0.ɵɵadvance(5);\n      ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  directives: [ɵngcc2.MatRipple],\n  styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nMatButtonToggle.ctorParameters = function () {\n  return [{\n    type: MatButtonToggleGroup,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_GROUP]\n    }]\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\nMatButtonToggle.propDecorators = {\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  _buttonElement: [{\n    type: ViewChild,\n    args: ['button']\n  }],\n  id: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }],\n  appearance: [{\n    type: Input\n  }],\n  checked: [{\n    type: Input\n  }],\n  disabled: [{\n    type: Input\n  }],\n  change: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.id]': 'id',\n        '[attr.name]': 'null',\n        '(focus)': 'focus()',\n        'role': 'presentation'\n      },\n      styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_GROUP]\n      }]\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.FocusMonitor\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    change: [{\n      type: Output\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    value: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatButtonToggleModule = function MatButtonToggleModule() {\n  _classCallCheck(this, MatButtonToggleModule);\n};\n\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n  return new (t || MatButtonToggleModule)();\n};\n\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[MatCommonModule, MatRippleModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, {\n    declarations: function declarations() {\n      return [MatButtonToggleGroup, MatButtonToggle];\n    },\n    imports: function imports() {\n      return [MatCommonModule, MatRippleModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle];\n    }\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule }; //# sourceMappingURL=button-toggle.js.map","map":{"version":3,"sources":["/home/user/Documents/local/lekariproj/lekarife/node_modules/@angular/material/__ivy_ngcc__/fesm2015/button-toggle.js"],"names":["FocusMonitor","coerceBooleanProperty","SelectionModel","InjectionToken","forwardRef","EventEmitter","Directive","ChangeDetectorRef","Optional","Inject","ContentChildren","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ElementRef","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","mixinDisableRipple","MatCommonModule","MatRippleModule","ɵngcc0","ɵngcc1","ɵngcc2","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","source","value","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","valueChange","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","selected","_selectionModel","multiple","map","undefined","newValue","_setSelectionByValue","emit","select","filter","checked","markForCheck","fn","isDisabled","disabled","Array","isArray","length","event","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","ngDevMode","Error","_clearSelection","currentValue","_selectValue","clear","correspondingOption","find","_emitChangeEvent","ɵfac","MatButtonToggleGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","MatButtonToggle","_t","ɵɵqueryRefresh","ɵɵloadQuery","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","ɵɵattribute","ɵɵclassProp","vertical","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ctorParameters","decorators","args","propDecorators","descendants","ɵsetClassMetadata","selector","providers","host","_MatButtonToggleBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_isPrechecked","monitor","stopMonitoring","options","_buttonElement","nativeElement","focus","newChecked","MatButtonToggle_Factory","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","viewQuery","MatButtonToggle_Query","ɵɵviewQuery","first","MatButtonToggle_HostBindings","ɵɵlistener","MatButtonToggle_focus_HostBindingHandler","disableRipple","ariaLabel","ɵɵInheritDefinitionFeature","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","ɵɵprojectionDef","ɵɵelementStart","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","ɵɵprojection","ɵɵelementEnd","ɵɵelement","_r0","ɵɵreference","ɵɵproperty","buttonId","ɵɵadvance","directives","MatRipple","styles","encapsulation","changeDetection","String","None","OnPush","MatButtonToggleModule","MatButtonToggleModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"mappings":"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","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {\n});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); };\nMatButtonToggleModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map"]},"metadata":{},"sourceType":"module"}